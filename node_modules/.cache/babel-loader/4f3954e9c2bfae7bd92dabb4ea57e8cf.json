{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nimport { supportedPools } from './lib/constants';\nimport Web3 from 'web3';\nconst web3 = new Web3();\nconst BN = web3.utils.BN;\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80\n});\nconst GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 200000,\n    SNX: 850000\n  }\n};\nexport const getMasterChefAddress = quic => {\n  return quic && quic.masterChefAddress;\n};\nexport const getWethPriceAddress = quic => {\n  return quic && quic.wethPriceAddress;\n};\nexport const getQuicPriceAddress = quic => {\n  return quic && quic.quicPriceAddress;\n};\nexport const getQuicAddress = quic => {\n  return quic && quic.quicAddress;\n};\nexport const getWethContract = quic => {\n  return quic && quic.contracts && quic.contracts.weth;\n};\nexport const getWethPriceContract = quic => {\n  return quic && quic.contracts && quic.contracts.wethPrice;\n};\nexport const getQuicPriceContract = quic => {\n  return quic && quic.contracts && quic.contracts.quicPrice;\n};\nexport const getMasterChefContract = quic => {\n  return quic && quic.contracts && quic.contracts.masterChef;\n};\nexport const getQuicContract = quic => {\n  return quic && quic.contracts && quic.contracts.quic;\n};\nexport const getFarms = quic => {\n  return quic ? quic.contracts.pools.map(({\n    pid,\n    name,\n    symbol,\n    icon,\n    tokenAddress,\n    tokenDecimals,\n    tokenSymbol,\n    tokenContract,\n    lpAddress,\n    lpContract,\n    refUrl,\n    poolType\n  }) => ({\n    pid,\n    id: symbol,\n    name,\n    lpToken: symbol,\n    lpTokenAddress: lpAddress,\n    lpContract,\n    tokenAddress,\n    tokenDecimals,\n    tokenSymbol,\n    tokenContract,\n    earnToken: 'QUIC',\n    earnTokenAddress: quic.contracts.quic.options.address,\n    icon,\n    refUrl,\n    poolType\n  })) : [];\n};\nexport const getPoolWeight = async (masterChefContract, pid) => {\n  const [{\n    allocPoint\n  }, totalAllocPoint] = await Promise.all([masterChefContract.methods.poolInfo(pid).call(), masterChefContract.methods.totalAllocPoint().call()]);\n  return new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint));\n};\nexport const getEarned = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods.pendingReward(pid, account).call();\n};\nexport const getLockedEarned = async (quicContract, account) => {\n  return quicContract.methods.lockOf(account).call();\n};\nexport const getTotalLPWethValue = async (masterChefContract, wethContract, lpContract, tokenContract, tokenDecimals, pid) => {\n  const [tokenAmountWholeLP, balance, totalSupply, lpContractWeth, poolWeight] = await Promise.all([tokenContract.methods.balanceOf(lpContract.options.address).call(), lpContract.methods.balanceOf(masterChefContract.options.address).call(), lpContract.methods.totalSupply().call(), wethContract.methods.balanceOf(lpContract.options.address).call(), getPoolWeight(masterChefContract, pid)]); // Return p1 * w1 * 2\n\n  const portionLp = new BigNumber(balance).div(new BigNumber(totalSupply));\n  const lpWethWorth = new BigNumber(lpContractWeth);\n  const totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2)); // Calculate\n\n  const tokenAmount = new BigNumber(tokenAmountWholeLP).times(portionLp).div(new BigNumber(10).pow(tokenDecimals));\n  const wethAmount = new BigNumber(lpContractWeth).times(portionLp).div(new BigNumber(10).pow(18));\n  return {\n    tokenAmount,\n    wethAmount,\n    totalWethValue: totalLpWethValue.div(new BigNumber(10).pow(18)),\n    tokenPriceInWeth: wethAmount.div(tokenAmount),\n    poolWeight: poolWeight\n  };\n};\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods.approve(masterChefContract.options.address, ethers.constants.MaxUint256).send({\n    from: account\n  });\n};\nexport const stake = async (masterChefContract, pid, amount, account, ref) => {\n  return masterChefContract.methods.deposit(pid, ethers.utils.parseUnits(amount, 18), ref).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const unstake = async (masterChefContract, pid, amount, account, ref) => {\n  return masterChefContract.methods.withdraw(pid, ethers.utils.parseUnits(amount, 18), ref).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods.claimReward(pid).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const getStaked = async (masterChefContract, pid, account) => {\n  try {\n    const {\n      amount\n    } = await masterChefContract.methods.userInfo(pid, account).call();\n    return new BigNumber(amount);\n  } catch {\n    return new BigNumber(0);\n  }\n};\nexport const getWethPrice = async quic => {\n  console.log(\"utils.js getWethPrice\");\n  const amount = await quic.contracts.wethPrice.methods.latestAnswer().call();\n  console.log(\"Got Weth price \" + amount);\n  return new BigNumber(amount);\n};\nexport const getQuicPrice = async quic => {\n  const addr = quic.quicAddress;\n  console.log(\"utils.js getQuicPrice\");\n  const amount = await quic.contracts.quicPrice.methods.consult(addr.toString(), 1).call();\n  return new BigNumber(amount);\n};\nexport const getQuicSupply = async quic => {\n  return new BigNumber(await quic.contracts.quic.methods.totalSupply().call());\n};\nexport const getReferrals = async (masterChefContract, account) => {\n  return await masterChefContract.methods.getGlobalRefAmount(account).call();\n};\nexport function getRefUrl() {\n  var refer = '0x0000000000000000000000000000000000000000';\n  const urlParams = new URLSearchParams(window.location.search);\n\n  if (urlParams.has('ref')) {\n    refer = urlParams.get('ref');\n  }\n\n  console.log(refer);\n  return refer;\n}\nexport const redeem = async (masterChefContract, account) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return masterChefContract.methods.exit().send({\n      from: account\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert('pool not active');\n  }\n};\nexport const runSetup = async (masterChefContract, account) => {\n  return await masterChefContract.methods.setup().send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const addPair = async (masterChefContract, account, weight, lpAddress, updatePools) => {\n  return await masterChefContract.methods.add(weight, lpAddress, false).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const setPair = async (masterChefContract, account, pid, weight, updatePools) => {\n  return await masterChefContract.methods.set(pid, weight, updatePools).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const addAuthorized = async (masterChefContract, quic, account, authorizedAddress) => {\n  await quic.methods.addAuthorized(authorizedAddress).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n  });\n  return await masterChefContract.methods.addAuthorized(authorizedAddress).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const transferOwnership = async (quic, account, recipient) => {\n  return await quic.methods.transferOwnership(recipient).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const mint = async (quic, account, recipient, amount) => {\n  return await quic.methods.mint(recipient, amount).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const capUpdate = async (quic, account, amount) => {\n  return await quic.methods.capUpdate(amount).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const getCap = async quic => {\n  return new BigNumber(await quic.contracts.quic.methods.cap().call());\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/quic.finance/client/src/quic/utils.js"],"names":["BigNumber","ethers","supportedPools","Web3","web3","BN","utils","config","EXPONENTIAL_AT","DECIMAL_PLACES","GAS_LIMIT","STAKING","DEFAULT","SNX","getMasterChefAddress","quic","masterChefAddress","getWethPriceAddress","wethPriceAddress","getQuicPriceAddress","quicPriceAddress","getQuicAddress","quicAddress","getWethContract","contracts","weth","getWethPriceContract","wethPrice","getQuicPriceContract","quicPrice","getMasterChefContract","masterChef","getQuicContract","getFarms","pools","map","pid","name","symbol","icon","tokenAddress","tokenDecimals","tokenSymbol","tokenContract","lpAddress","lpContract","refUrl","poolType","id","lpToken","lpTokenAddress","earnToken","earnTokenAddress","options","address","getPoolWeight","masterChefContract","allocPoint","totalAllocPoint","Promise","all","methods","poolInfo","call","div","getEarned","account","pendingReward","getLockedEarned","quicContract","lockOf","getTotalLPWethValue","wethContract","tokenAmountWholeLP","balance","totalSupply","lpContractWeth","poolWeight","balanceOf","portionLp","lpWethWorth","totalLpWethValue","times","tokenAmount","pow","wethAmount","totalWethValue","tokenPriceInWeth","approve","constants","MaxUint256","send","from","stake","amount","ref","deposit","parseUnits","on","tx","console","log","transactionHash","unstake","withdraw","harvest","claimReward","getStaked","userInfo","getWethPrice","latestAnswer","getQuicPrice","addr","consult","toString","getQuicSupply","getReferrals","getGlobalRefAmount","getRefUrl","refer","urlParams","URLSearchParams","window","location","search","has","get","redeem","now","Date","getTime","exit","alert","runSetup","setup","addPair","weight","updatePools","add","setPair","set","addAuthorized","authorizedAddress","transferOwnership","recipient","mint","capUpdate","getCap","cap"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,IAAI,GAAG,IAAID,IAAJ,EAAb;AACA,MAAME,EAAE,GAAGD,IAAI,CAACE,KAAL,CAAWD,EAAtB;AAEAL,SAAS,CAACO,MAAV,CAAiB;AAChBC,EAAAA,cAAc,EAAE,IADA;AAEhBC,EAAAA,cAAc,EAAE;AAFA,CAAjB;AAKA,MAAMC,SAAS,GAAG;AACjBC,EAAAA,OAAO,EAAE;AACRC,IAAAA,OAAO,EAAE,MADD;AAERC,IAAAA,GAAG,EAAE;AAFG;AADQ,CAAlB;AAOA,OAAO,MAAMC,oBAAoB,GAAIC,IAAD,IAAU;AAC7C,SAAOA,IAAI,IAAIA,IAAI,CAACC,iBAApB;AACA,CAFM;AAIP,OAAO,MAAMC,mBAAmB,GAAIF,IAAD,IAAU;AAC5C,SAAOA,IAAI,IAAIA,IAAI,CAACG,gBAApB;AACA,CAFM;AAIP,OAAO,MAAMC,mBAAmB,GAAIJ,IAAD,IAAU;AAC5C,SAAOA,IAAI,IAAIA,IAAI,CAACK,gBAApB;AACA,CAFM;AAIP,OAAO,MAAMC,cAAc,GAAIN,IAAD,IAAU;AACvC,SAAOA,IAAI,IAAIA,IAAI,CAACO,WAApB;AACA,CAFM;AAGP,OAAO,MAAMC,eAAe,GAAIR,IAAD,IAAU;AACxC,SAAOA,IAAI,IAAIA,IAAI,CAACS,SAAb,IAA0BT,IAAI,CAACS,SAAL,CAAeC,IAAhD;AACA,CAFM;AAIP,OAAO,MAAMC,oBAAoB,GAAIX,IAAD,IAAU;AAC7C,SAAOA,IAAI,IAAIA,IAAI,CAACS,SAAb,IAA0BT,IAAI,CAACS,SAAL,CAAeG,SAAhD;AACA,CAFM;AAIP,OAAO,MAAMC,oBAAoB,GAAIb,IAAD,IAAU;AAC7C,SAAOA,IAAI,IAAIA,IAAI,CAACS,SAAb,IAA0BT,IAAI,CAACS,SAAL,CAAeK,SAAhD;AACA,CAFM;AAIP,OAAO,MAAMC,qBAAqB,GAAIf,IAAD,IAAU;AAC9C,SAAOA,IAAI,IAAIA,IAAI,CAACS,SAAb,IAA0BT,IAAI,CAACS,SAAL,CAAeO,UAAhD;AACA,CAFM;AAGP,OAAO,MAAMC,eAAe,GAAIjB,IAAD,IAAU;AACxC,SAAOA,IAAI,IAAIA,IAAI,CAACS,SAAb,IAA0BT,IAAI,CAACS,SAAL,CAAeT,IAAhD;AACA,CAFM;AAIP,OAAO,MAAMkB,QAAQ,GAAIlB,IAAD,IAAU;AACjC,SAAOA,IAAI,GACRA,IAAI,CAACS,SAAL,CAAeU,KAAf,CAAqBC,GAArB,CACA,CAAC;AACAC,IAAAA,GADA;AAEAC,IAAAA,IAFA;AAGAC,IAAAA,MAHA;AAIAC,IAAAA,IAJA;AAKAC,IAAAA,YALA;AAMAC,IAAAA,aANA;AAOAC,IAAAA,WAPA;AAQAC,IAAAA,aARA;AASAC,IAAAA,SATA;AAUAC,IAAAA,UAVA;AAWAC,IAAAA,MAXA;AAYAC,IAAAA;AAZA,GAAD,MAaO;AACNX,IAAAA,GADM;AAENY,IAAAA,EAAE,EAAEV,MAFE;AAGND,IAAAA,IAHM;AAINY,IAAAA,OAAO,EAAEX,MAJH;AAKNY,IAAAA,cAAc,EAAEN,SALV;AAMNC,IAAAA,UANM;AAONL,IAAAA,YAPM;AAQNC,IAAAA,aARM;AASNC,IAAAA,WATM;AAUNC,IAAAA,aAVM;AAWNQ,IAAAA,SAAS,EAAE,MAXL;AAYNC,IAAAA,gBAAgB,EAAErC,IAAI,CAACS,SAAL,CAAeT,IAAf,CAAoBsC,OAApB,CAA4BC,OAZxC;AAaNf,IAAAA,IAbM;AAcNO,IAAAA,MAdM;AAeNC,IAAAA;AAfM,GAbP,CADA,CADQ,GAiCR,EAjCH;AAkCA,CAnCM;AAqCP,OAAO,MAAMQ,aAAa,GAAG,OAAOC,kBAAP,EAA2BpB,GAA3B,KAAmC;AAC/D,QAAM,CAAC;AAAEqB,IAAAA;AAAF,GAAD,EAAiBC,eAAjB,IAAoC,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC3DJ,kBAAkB,CAACK,OAAnB,CAA2BC,QAA3B,CAAoC1B,GAApC,EAAyC2B,IAAzC,EAD2D,EAE3DP,kBAAkB,CAACK,OAAnB,CAA2BH,eAA3B,GAA6CK,IAA7C,EAF2D,CAAZ,CAAhD;AAKA,SAAO,IAAI/D,SAAJ,CAAcyD,UAAd,EAA0BO,GAA1B,CAA8B,IAAIhE,SAAJ,CAAc0D,eAAd,CAA9B,CAAP;AACA,CAPM;AASP,OAAO,MAAMO,SAAS,GAAG,OAAOT,kBAAP,EAA2BpB,GAA3B,EAAgC8B,OAAhC,KAA4C;AACpE,SAAOV,kBAAkB,CAACK,OAAnB,CAA2BM,aAA3B,CAAyC/B,GAAzC,EAA8C8B,OAA9C,EAAuDH,IAAvD,EAAP;AACA,CAFM;AAIP,OAAO,MAAMK,eAAe,GAAG,OAAOC,YAAP,EAAqBH,OAArB,KAAiC;AAC/D,SAAOG,YAAY,CAACR,OAAb,CAAqBS,MAArB,CAA4BJ,OAA5B,EAAqCH,IAArC,EAAP;AACA,CAFM;AAIP,OAAO,MAAMQ,mBAAmB,GAAG,OAClCf,kBADkC,EAElCgB,YAFkC,EAGlC3B,UAHkC,EAIlCF,aAJkC,EAKlCF,aALkC,EAMlCL,GANkC,KAO9B;AACJ,QAAM,CACLqC,kBADK,EAELC,OAFK,EAGLC,WAHK,EAILC,cAJK,EAKLC,UALK,IAMF,MAAMlB,OAAO,CAACC,GAAR,CAAY,CACrBjB,aAAa,CAACkB,OAAd,CAAsBiB,SAAtB,CAAgCjC,UAAU,CAACQ,OAAX,CAAmBC,OAAnD,EAA4DS,IAA5D,EADqB,EAErBlB,UAAU,CAACgB,OAAX,CAAmBiB,SAAnB,CAA6BtB,kBAAkB,CAACH,OAAnB,CAA2BC,OAAxD,EAAiES,IAAjE,EAFqB,EAGrBlB,UAAU,CAACgB,OAAX,CAAmBc,WAAnB,GAAiCZ,IAAjC,EAHqB,EAIrBS,YAAY,CAACX,OAAb,CAAqBiB,SAArB,CAA+BjC,UAAU,CAACQ,OAAX,CAAmBC,OAAlD,EAA2DS,IAA3D,EAJqB,EAKrBR,aAAa,CAACC,kBAAD,EAAqBpB,GAArB,CALQ,CAAZ,CANV,CADI,CAeJ;;AACA,QAAM2C,SAAS,GAAG,IAAI/E,SAAJ,CAAc0E,OAAd,EAAuBV,GAAvB,CAA2B,IAAIhE,SAAJ,CAAc2E,WAAd,CAA3B,CAAlB;AACA,QAAMK,WAAW,GAAG,IAAIhF,SAAJ,CAAc4E,cAAd,CAApB;AACA,QAAMK,gBAAgB,GAAGF,SAAS,CAACG,KAAV,CAAgBF,WAAhB,EAA6BE,KAA7B,CAAmC,IAAIlF,SAAJ,CAAc,CAAd,CAAnC,CAAzB,CAlBI,CAmBJ;;AACA,QAAMmF,WAAW,GAAG,IAAInF,SAAJ,CAAcyE,kBAAd,EAClBS,KADkB,CACZH,SADY,EAElBf,GAFkB,CAEd,IAAIhE,SAAJ,CAAc,EAAd,EAAkBoF,GAAlB,CAAsB3C,aAAtB,CAFc,CAApB;AAIA,QAAM4C,UAAU,GAAG,IAAIrF,SAAJ,CAAc4E,cAAd,EACjBM,KADiB,CACXH,SADW,EAEjBf,GAFiB,CAEb,IAAIhE,SAAJ,CAAc,EAAd,EAAkBoF,GAAlB,CAAsB,EAAtB,CAFa,CAAnB;AAGA,SAAO;AACND,IAAAA,WADM;AAENE,IAAAA,UAFM;AAGNC,IAAAA,cAAc,EAAEL,gBAAgB,CAACjB,GAAjB,CAAqB,IAAIhE,SAAJ,CAAc,EAAd,EAAkBoF,GAAlB,CAAsB,EAAtB,CAArB,CAHV;AAING,IAAAA,gBAAgB,EAAEF,UAAU,CAACrB,GAAX,CAAemB,WAAf,CAJZ;AAKNN,IAAAA,UAAU,EAAEA;AALN,GAAP;AAOA,CAzCM;AA2CP,OAAO,MAAMW,OAAO,GAAG,OAAO3C,UAAP,EAAmBW,kBAAnB,EAAuCU,OAAvC,KAAmD;AACzE,SAAOrB,UAAU,CAACgB,OAAX,CACL2B,OADK,CACGhC,kBAAkB,CAACH,OAAnB,CAA2BC,OAD9B,EACuCrD,MAAM,CAACwF,SAAP,CAAiBC,UADxD,EAELC,IAFK,CAEA;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAFA,CAAP;AAGA,CAJM;AAMP,OAAO,MAAM2B,KAAK,GAAG,OAAOrC,kBAAP,EAA2BpB,GAA3B,EAAgC0D,MAAhC,EAAwC5B,OAAxC,EAAiD6B,GAAjD,KAAyD;AAC7E,SAAOvC,kBAAkB,CAACK,OAAnB,CACLmC,OADK,CACG5D,GADH,EACQnC,MAAM,CAACK,KAAP,CAAa2F,UAAb,CAAwBH,MAAxB,EAAgC,EAAhC,CADR,EAC6CC,GAD7C,EAELJ,IAFK,CAEA;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAFA,EAGLgC,EAHK,CAGF,iBAHE,EAGkBC,EAAD,IAAQ;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACA,GANK,CAAP;AAOA,CARM;AAUP,OAAO,MAAMC,OAAO,GAAG,OACtB/C,kBADsB,EAEtBpB,GAFsB,EAGtB0D,MAHsB,EAItB5B,OAJsB,EAKtB6B,GALsB,KAMlB;AACJ,SAAOvC,kBAAkB,CAACK,OAAnB,CACL2C,QADK,CACIpE,GADJ,EACSnC,MAAM,CAACK,KAAP,CAAa2F,UAAb,CAAwBH,MAAxB,EAAgC,EAAhC,CADT,EAC8CC,GAD9C,EAELJ,IAFK,CAEA;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAFA,EAGLgC,EAHK,CAGF,iBAHE,EAGkBC,EAAD,IAAQ;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACA,GANK,CAAP;AAOA,CAdM;AAeP,OAAO,MAAMG,OAAO,GAAG,OAAOjD,kBAAP,EAA2BpB,GAA3B,EAAgC8B,OAAhC,KAA4C;AAClE,SAAOV,kBAAkB,CAACK,OAAnB,CACL6C,WADK,CACOtE,GADP,EAELuD,IAFK,CAEA;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAFA,EAGLgC,EAHK,CAGF,iBAHE,EAGkBC,EAAD,IAAQ;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACA,GANK,CAAP;AAOA,CARM;AAUP,OAAO,MAAMK,SAAS,GAAG,OAAOnD,kBAAP,EAA2BpB,GAA3B,EAAgC8B,OAAhC,KAA4C;AACpE,MAAI;AACH,UAAM;AAAE4B,MAAAA;AAAF,QAAa,MAAMtC,kBAAkB,CAACK,OAAnB,CACvB+C,QADuB,CACdxE,GADc,EACT8B,OADS,EAEvBH,IAFuB,EAAzB;AAGA,WAAO,IAAI/D,SAAJ,CAAc8F,MAAd,CAAP;AACA,GALD,CAKE,MAAM;AACP,WAAO,IAAI9F,SAAJ,CAAc,CAAd,CAAP;AACA;AACD,CATM;AAWP,OAAO,MAAM6G,YAAY,GAAG,MAAO9F,IAAP,IAAgB;AAC3CqF,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,QAAMP,MAAM,GAAG,MAAM/E,IAAI,CAACS,SAAL,CAAeG,SAAf,CAAyBkC,OAAzB,CAAiCiD,YAAjC,GAAgD/C,IAAhD,EAArB;AACAqC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBP,MAAhC;AACA,SAAO,IAAI9F,SAAJ,CAAc8F,MAAd,CAAP;AACA,CALM;AAOP,OAAO,MAAMiB,YAAY,GAAG,MAAOhG,IAAP,IAAgB;AAC3C,QAAMiG,IAAI,GAAGjG,IAAI,CAACO,WAAlB;AACA8E,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEA,QAAMP,MAAM,GAAG,MAAM/E,IAAI,CAACS,SAAL,CAAeK,SAAf,CAAyBgC,OAAzB,CACnBoD,OADmB,CACXD,IAAI,CAACE,QAAL,EADW,EACM,CADN,EAEnBnD,IAFmB,EAArB;AAGA,SAAO,IAAI/D,SAAJ,CAAc8F,MAAd,CAAP;AACA,CARM;AAUP,OAAO,MAAMqB,aAAa,GAAG,MAAOpG,IAAP,IAAgB;AAC5C,SAAO,IAAIf,SAAJ,CAAc,MAAMe,IAAI,CAACS,SAAL,CAAeT,IAAf,CAAoB8C,OAApB,CAA4Bc,WAA5B,GAA0CZ,IAA1C,EAApB,CAAP;AACA,CAFM;AAIP,OAAO,MAAMqD,YAAY,GAAG,OAAO5D,kBAAP,EAA2BU,OAA3B,KAAuC;AAClE,SAAO,MAAMV,kBAAkB,CAACK,OAAnB,CAA2BwD,kBAA3B,CAA8CnD,OAA9C,EAAuDH,IAAvD,EAAb;AACA,CAFM;AAIP,OAAO,SAASuD,SAAT,GAAqB;AAC3B,MAAIC,KAAK,GAAG,4CAAZ;AACA,QAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAlB;;AACA,MAAIJ,SAAS,CAACK,GAAV,CAAc,KAAd,CAAJ,EAA0B;AACzBN,IAAAA,KAAK,GAAGC,SAAS,CAACM,GAAV,CAAc,KAAd,CAAR;AACA;;AACD1B,EAAAA,OAAO,CAACC,GAAR,CAAYkB,KAAZ;AAEA,SAAOA,KAAP;AACA;AAED,OAAO,MAAMQ,MAAM,GAAG,OAAOvE,kBAAP,EAA2BU,OAA3B,KAAuC;AAC5D,MAAI8D,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAjC;;AACA,MAAIF,GAAG,IAAI,UAAX,EAAuB;AACtB,WAAOxE,kBAAkB,CAACK,OAAnB,CACLsE,IADK,GAELxC,IAFK,CAEA;AAAEC,MAAAA,IAAI,EAAE1B;AAAR,KAFA,EAGLgC,EAHK,CAGF,iBAHE,EAGkBC,EAAD,IAAQ;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,aAAOA,EAAE,CAACG,eAAV;AACA,KANK,CAAP;AAOA,GARD,MAQO;AACN8B,IAAAA,KAAK,CAAC,iBAAD,CAAL;AACA;AACD,CAbM;AAeP,OAAO,MAAMC,QAAQ,GAAG,OAAO7E,kBAAP,EAA2BU,OAA3B,KAAuC;AAC9D,SAAO,MAAMV,kBAAkB,CAACK,OAAnB,CAA2ByE,KAA3B,GAAmC3C,IAAnC,CAAwC;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAAxC,EACZgC,EADY,CACT,iBADS,EACWC,EAAD,IAAQ;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACA,GAJY,CAAb;AAKA,CANM;AAQP,OAAO,MAAMiC,OAAO,GAAG,OAAO/E,kBAAP,EAA2BU,OAA3B,EAAoCsE,MAApC,EAA4C5F,SAA5C,EAAuD6F,WAAvD,KAAuE;AAC7F,SAAO,MAAMjF,kBAAkB,CAACK,OAAnB,CAA2B6E,GAA3B,CAA+BF,MAA/B,EAAuC5F,SAAvC,EAAkD,KAAlD,EAAyD+C,IAAzD,CAA8D;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAA9D,EACZgC,EADY,CACT,iBADS,EACWC,EAAD,IAAQ;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACA,GAJY,CAAb;AAKA,CANM;AAQP,OAAO,MAAMqC,OAAO,GAAG,OAAOnF,kBAAP,EAA2BU,OAA3B,EAAoC9B,GAApC,EAAyCoG,MAAzC,EAAiDC,WAAjD,KAAiE;AACvF,SAAO,MAAMjF,kBAAkB,CAACK,OAAnB,CAA2B+E,GAA3B,CAA+BxG,GAA/B,EAAoCoG,MAApC,EAA4CC,WAA5C,EAAyD9C,IAAzD,CAA8D;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAA9D,EACZgC,EADY,CACT,iBADS,EACWC,EAAD,IAAQ;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACA,GAJY,CAAb;AAKA,CANM;AAQP,OAAO,MAAMuC,aAAa,GAAG,OAAOrF,kBAAP,EAA2BzC,IAA3B,EAAiCmD,OAAjC,EAA0C4E,iBAA1C,KAAgE;AAC5F,QAAM/H,IAAI,CAAC8C,OAAL,CAAagF,aAAb,CAA2BC,iBAA3B,EAA8CnD,IAA9C,CAAmD;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAAnD,EACLgC,EADK,CACF,iBADE,EACkBC,EAAD,IAAQ;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,GAHK,CAAN;AAIA,SAAO,MAAM3C,kBAAkB,CAACK,OAAnB,CAA2BgF,aAA3B,CAAyCC,iBAAzC,EAA4DnD,IAA5D,CAAiE;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAAjE,EACZgC,EADY,CACT,iBADS,EACWC,EAAD,IAAQ;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACA,GAJY,CAAb;AAKA,CAVM;AAYP,OAAO,MAAMyC,iBAAiB,GAAG,OAAOhI,IAAP,EAAamD,OAAb,EAAsB8E,SAAtB,KAAoC;AACpE,SAAO,MAAMjI,IAAI,CAAC8C,OAAL,CAAakF,iBAAb,CAA+BC,SAA/B,EAA0CrD,IAA1C,CAA+C;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAA/C,EACZgC,EADY,CACT,iBADS,EACWC,EAAD,IAAQ;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACA,GAJY,CAAb;AAKA,CANM;AAQP,OAAO,MAAM2C,IAAI,GAAG,OAAOlI,IAAP,EAAamD,OAAb,EAAsB8E,SAAtB,EAAiClD,MAAjC,KAA4C;AAC/D,SAAO,MAAM/E,IAAI,CAAC8C,OAAL,CAAaoF,IAAb,CAAkBD,SAAlB,EAA6BlD,MAA7B,EAAsCH,IAAtC,CAA2C;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAA3C,EACZgC,EADY,CACT,iBADS,EACWC,EAAD,IAAQ;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACA,GAJY,CAAb;AAKA,CANM;AAQP,OAAO,MAAM4C,SAAS,GAAG,OAAOnI,IAAP,EAAamD,OAAb,EAAsB4B,MAAtB,KAAiC;AACzD,SAAO,MAAM/E,IAAI,CAAC8C,OAAL,CAAaqF,SAAb,CAAuBpD,MAAvB,EAA+BH,IAA/B,CAAoC;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAApC,EACZgC,EADY,CACT,iBADS,EACWC,EAAD,IAAQ;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACA,GAJY,CAAb;AAKA,CANM;AAQP,OAAO,MAAM6C,MAAM,GAAG,MAAOpI,IAAP,IAAgB;AACrC,SAAO,IAAIf,SAAJ,CAAc,MAAMe,IAAI,CAACS,SAAL,CAAeT,IAAf,CAAoB8C,OAApB,CAA4BuF,GAA5B,GAAkCrF,IAAlC,EAApB,CAAP;AACA,CAFM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { supportedPools } from './lib/constants'\nimport Web3 from 'web3'\n\nconst web3 = new Web3();\nconst BN = web3.utils.BN;\n\nBigNumber.config({\n\tEXPONENTIAL_AT: 1000,\n\tDECIMAL_PLACES: 80,\n})\n\nconst GAS_LIMIT = {\n\tSTAKING: {\n\t\tDEFAULT: 200000,\n\t\tSNX: 850000,\n\t},\n}\n\nexport const getMasterChefAddress = (quic) => {\n\treturn quic && quic.masterChefAddress\n}\n\nexport const getWethPriceAddress = (quic) => {\n\treturn quic && quic.wethPriceAddress\n}\n\nexport const getQuicPriceAddress = (quic) => {\n\treturn quic && quic.quicPriceAddress\n}\n\nexport const getQuicAddress = (quic) => {\n\treturn quic && quic.quicAddress\n}\nexport const getWethContract = (quic) => {\n\treturn quic && quic.contracts && quic.contracts.weth\n}\n\nexport const getWethPriceContract = (quic) => {\n\treturn quic && quic.contracts && quic.contracts.wethPrice\n}\n\nexport const getQuicPriceContract = (quic) => {\n\treturn quic && quic.contracts && quic.contracts.quicPrice\n}\n\nexport const getMasterChefContract = (quic) => {\n\treturn quic && quic.contracts && quic.contracts.masterChef\n}\nexport const getQuicContract = (quic) => {\n\treturn quic && quic.contracts && quic.contracts.quic\n}\n\nexport const getFarms = (quic) => {\n\treturn quic\n\t\t? quic.contracts.pools.map(\n\t\t\t\t({\n\t\t\t\t\tpid,\n\t\t\t\t\tname,\n\t\t\t\t\tsymbol,\n\t\t\t\t\ticon,\n\t\t\t\t\ttokenAddress,\n\t\t\t\t\ttokenDecimals,\n\t\t\t\t\ttokenSymbol,\n\t\t\t\t\ttokenContract,\n\t\t\t\t\tlpAddress,\n\t\t\t\t\tlpContract,\n\t\t\t\t\trefUrl,\n\t\t\t\t\tpoolType,\n\t\t\t\t}) => ({\n\t\t\t\t\tpid,\n\t\t\t\t\tid: symbol,\n\t\t\t\t\tname,\n\t\t\t\t\tlpToken: symbol,\n\t\t\t\t\tlpTokenAddress: lpAddress,\n\t\t\t\t\tlpContract,\n\t\t\t\t\ttokenAddress,\n\t\t\t\t\ttokenDecimals,\n\t\t\t\t\ttokenSymbol,\n\t\t\t\t\ttokenContract,\n\t\t\t\t\tearnToken: 'QUIC',\n\t\t\t\t\tearnTokenAddress: quic.contracts.quic.options.address,\n\t\t\t\t\ticon,\n\t\t\t\t\trefUrl,\n\t\t\t\t\tpoolType,\n\t\t\t\t}),\n\t\t  )\n\t\t: []\n}\n\nexport const getPoolWeight = async (masterChefContract, pid) => {\n\tconst [{ allocPoint }, totalAllocPoint] = await Promise.all([\n\t\tmasterChefContract.methods.poolInfo(pid).call(),\n\t\tmasterChefContract.methods.totalAllocPoint().call(),\n\t])\n\n\treturn new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint))\n}\n\nexport const getEarned = async (masterChefContract, pid, account) => {\n\treturn masterChefContract.methods.pendingReward(pid, account).call()\n}\n\nexport const getLockedEarned = async (quicContract, account) => {\n\treturn quicContract.methods.lockOf(account).call()\n}\n\nexport const getTotalLPWethValue = async (\n\tmasterChefContract,\n\twethContract,\n\tlpContract,\n\ttokenContract,\n\ttokenDecimals,\n\tpid,\n) => {\n\tconst [\n\t\ttokenAmountWholeLP,\n\t\tbalance,\n\t\ttotalSupply,\n\t\tlpContractWeth,\n\t\tpoolWeight,\n\t] = await Promise.all([\n\t\ttokenContract.methods.balanceOf(lpContract.options.address).call(),\n\t\tlpContract.methods.balanceOf(masterChefContract.options.address).call(),\n\t\tlpContract.methods.totalSupply().call(),\n\t\twethContract.methods.balanceOf(lpContract.options.address).call(),\n\t\tgetPoolWeight(masterChefContract, pid),\n\t])\n\n\t// Return p1 * w1 * 2\n\tconst portionLp = new BigNumber(balance).div(new BigNumber(totalSupply))\n\tconst lpWethWorth = new BigNumber(lpContractWeth)\n\tconst totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2))\n\t// Calculate\n\tconst tokenAmount = new BigNumber(tokenAmountWholeLP)\n\t\t.times(portionLp)\n\t\t.div(new BigNumber(10).pow(tokenDecimals))\n\n\tconst wethAmount = new BigNumber(lpContractWeth)\n\t\t.times(portionLp)\n\t\t.div(new BigNumber(10).pow(18))\n\treturn {\n\t\ttokenAmount,\n\t\twethAmount,\n\t\ttotalWethValue: totalLpWethValue.div(new BigNumber(10).pow(18)),\n\t\ttokenPriceInWeth: wethAmount.div(tokenAmount),\n\t\tpoolWeight: poolWeight,\n\t}\n}\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n\treturn lpContract.methods\n\t\t.approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n\t\t.send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, ref) => {\n\treturn masterChefContract.methods\n\t\t.deposit(pid, ethers.utils.parseUnits(amount, 18), ref)\n\t\t.send({ from: account })\n\t\t.on('transactionHash', (tx) => {\n\t\t\tconsole.log(tx)\n\t\t\treturn tx.transactionHash\n\t\t})\n}\n\nexport const unstake = async (\n\tmasterChefContract,\n\tpid,\n\tamount,\n\taccount,\n\tref,\n) => {\n\treturn masterChefContract.methods\n\t\t.withdraw(pid, ethers.utils.parseUnits(amount, 18), ref)\n\t\t.send({ from: account })\n\t\t.on('transactionHash', (tx) => {\n\t\t\tconsole.log(tx)\n\t\t\treturn tx.transactionHash\n\t\t})\n}\nexport const harvest = async (masterChefContract, pid, account) => {\n\treturn masterChefContract.methods\n\t\t.claimReward(pid)\n\t\t.send({ from: account })\n\t\t.on('transactionHash', (tx) => {\n\t\t\tconsole.log(tx)\n\t\t\treturn tx.transactionHash\n\t\t})\n}\n\nexport const getStaked = async (masterChefContract, pid, account) => {\n\ttry {\n\t\tconst { amount } = await masterChefContract.methods\n\t\t\t.userInfo(pid, account)\n\t\t\t.call()\n\t\treturn new BigNumber(amount)\n\t} catch {\n\t\treturn new BigNumber(0)\n\t}\n}\n\nexport const getWethPrice = async (quic) => {\n\tconsole.log(\"utils.js getWethPrice\")\n\tconst amount = await quic.contracts.wethPrice.methods.latestAnswer().call()\n\tconsole.log(\"Got Weth price \" + amount)\n\treturn new BigNumber(amount)\n}\n\nexport const getQuicPrice = async (quic) => {\n\tconst addr = quic.quicAddress\n\tconsole.log(\"utils.js getQuicPrice\")\n\n\tconst amount = await quic.contracts.quicPrice.methods\n\t\t.consult(addr.toString(), 1)\n\t\t.call()\n\treturn new BigNumber(amount)\n}\n\nexport const getQuicSupply = async (quic) => {\n\treturn new BigNumber(await quic.contracts.quic.methods.totalSupply().call())\n}\n\nexport const getReferrals = async (masterChefContract, account) => {\n\treturn await masterChefContract.methods.getGlobalRefAmount(account).call()\n}\n\nexport function getRefUrl() {\n\tvar refer = '0x0000000000000000000000000000000000000000'\n\tconst urlParams = new URLSearchParams(window.location.search)\n\tif (urlParams.has('ref')) {\n\t\trefer = urlParams.get('ref')\n\t}\n\tconsole.log(refer)\n\n\treturn refer\n}\n\nexport const redeem = async (masterChefContract, account) => {\n\tlet now = new Date().getTime() / 1000\n\tif (now >= 1597172400) {\n\t\treturn masterChefContract.methods\n\t\t\t.exit()\n\t\t\t.send({ from: account })\n\t\t\t.on('transactionHash', (tx) => {\n\t\t\t\tconsole.log(tx)\n\t\t\t\treturn tx.transactionHash\n\t\t\t})\n\t} else {\n\t\talert('pool not active')\n\t}\n}\n\nexport const runSetup = async (masterChefContract, account) => {\n\treturn await masterChefContract.methods.setup().send({ from: account })\n\t.on('transactionHash', (tx) => {\n\t\tconsole.log(tx)\n\t\treturn tx.transactionHash\n\t})\n}\n\nexport const addPair = async (masterChefContract, account, weight, lpAddress, updatePools) => {\n\treturn await masterChefContract.methods.add(weight, lpAddress, false).send({ from: account })\n\t.on('transactionHash', (tx) => {\n\t\tconsole.log(tx)\n\t\treturn tx.transactionHash\n\t})\n}\n\nexport const setPair = async (masterChefContract, account, pid, weight, updatePools) => {\n\treturn await masterChefContract.methods.set(pid, weight, updatePools).send({ from: account })\n\t.on('transactionHash', (tx) => {\n\t\tconsole.log(tx)\n\t\treturn tx.transactionHash\n\t})\n}\n\nexport const addAuthorized = async (masterChefContract, quic, account, authorizedAddress) => {\n\tawait quic.methods.addAuthorized(authorizedAddress).send({ from: account })\n\t.on('transactionHash', (tx) => {\n\t\tconsole.log(tx)\n\t})\n\treturn await masterChefContract.methods.addAuthorized(authorizedAddress).send({ from: account })\n\t.on('transactionHash', (tx) => {\n\t\tconsole.log(tx)\n\t\treturn tx.transactionHash\n\t})\n}\n\nexport const transferOwnership = async (quic, account, recipient) => {\n\treturn await quic.methods.transferOwnership(recipient).send({ from: account })\n\t.on('transactionHash', (tx) => {\n\t\tconsole.log(tx)\n\t\treturn tx.transactionHash\n\t})\n}\n\nexport const mint = async (quic, account, recipient, amount) => {\n\treturn await quic.methods.mint(recipient, amount ).send({ from: account })\n\t.on('transactionHash', (tx) => {\n\t\tconsole.log(tx)\n\t\treturn tx.transactionHash\n\t})\n}\n\nexport const capUpdate = async (quic, account, amount) => {\n\treturn await quic.methods.capUpdate(amount).send({ from: account })\n\t.on('transactionHash', (tx) => {\n\t\tconsole.log(tx)\n\t\treturn tx.transactionHash\n\t})\n}\n\nexport const getCap = async (quic) => {\n\treturn new BigNumber(await quic.contracts.quic.methods.cap().call())\n}"]},"metadata":{},"sourceType":"module"}