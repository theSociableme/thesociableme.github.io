{"ast":null,"code":"import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport { Contracts } from './lib/contracts.js';\nimport { Account } from './lib/accounts.js';\nimport { EVM } from './lib/evm.js';\nimport { contractAddresses } from './lib/constants';\nexport class Quic {\n  constructor(provider, networkId, testing, options) {\n    var realProvider;\n\n    if (typeof provider === 'string') {\n      if (provider.includes('wss')) {\n        realProvider = new Web3.providers.WebsocketProvider(provider, options.ethereumNodeTimeout || 10000);\n      } else {\n        realProvider = new Web3.providers.HttpProvider(provider, options.ethereumNodeTimeout || 10000);\n      }\n    } else {\n      realProvider = provider;\n    }\n\n    this.web3 = new Web3(realProvider);\n\n    if (testing) {\n      this.testing = new EVM(realProvider);\n      this.snapshot = this.testing.snapshot();\n    }\n\n    if (options.defaultAccount) {\n      this.web3.eth.defaultAccount = options.defaultAccount;\n    }\n\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options);\n    this.quicAddress = contractAddresses.quic[networkId];\n    this.masterChefAddress = contractAddresses.masterChef[networkId];\n    this.wethAddress = contractAddresses.weth[networkId];\n    this.wethPriceAddress = contractAddresses.wethPrice[networkId];\n    this.quicPriceAddress = contractAddresses.quicPrice[networkId];\n    console.log(`network Id: ${networkId}`, contractAddresses);\n  }\n\n  async resetEVM() {\n    this.testing.resetEVM(this.snapshot);\n  }\n\n  addAccount(address, number) {\n    this.accounts.push(new Account(this.contracts, address, number));\n  }\n\n  setProvider(provider, networkId) {\n    this.web3.setProvider(provider);\n    this.contracts.setProvider(provider, networkId);\n    this.operation.setNetworkId(networkId);\n  }\n\n  setDefaultAccount(account) {\n    this.web3.eth.defaultAccount = account;\n    this.contracts.setDefaultAccount(account);\n  }\n\n  getDefaultAccount() {\n    return this.web3.eth.defaultAccount;\n  }\n\n  loadAccount(account) {\n    const newAccount = this.web3.eth.accounts.wallet.add(account.privateKey);\n\n    if (!newAccount || account.address && account.address.toLowerCase() !== newAccount.address.toLowerCase()) {\n      throw new Error(`Loaded account address mismatch.\n        Expected ${account.address}, got ${newAccount ? newAccount.address : null}`);\n    }\n  }\n\n  toBigN(a) {\n    return BigNumber(a);\n  }\n\n}","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/quic.finance/client/src/quic/Quic.js"],"names":["Web3","BigNumber","Contracts","Account","EVM","contractAddresses","Quic","constructor","provider","networkId","testing","options","realProvider","includes","providers","WebsocketProvider","ethereumNodeTimeout","HttpProvider","web3","snapshot","defaultAccount","eth","contracts","quicAddress","quic","masterChefAddress","masterChef","wethAddress","weth","wethPriceAddress","wethPrice","quicPriceAddress","quicPrice","console","log","resetEVM","addAccount","address","number","accounts","push","setProvider","operation","setNetworkId","setDefaultAccount","account","getDefaultAccount","loadAccount","newAccount","wallet","add","privateKey","toLowerCase","Error","toBigN","a"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AAEA,OAAO,MAAMC,IAAN,CAAW;AACjBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AAClD,QAAIC,YAAJ;;AAEA,QAAI,OAAOJ,QAAP,KAAoB,QAAxB,EAAkC;AACjC,UAAIA,QAAQ,CAACK,QAAT,CAAkB,KAAlB,CAAJ,EAA8B;AAC7BD,QAAAA,YAAY,GAAG,IAAIZ,IAAI,CAACc,SAAL,CAAeC,iBAAnB,CACdP,QADc,EAEdG,OAAO,CAACK,mBAAR,IAA+B,KAFjB,CAAf;AAIA,OALD,MAKO;AACNJ,QAAAA,YAAY,GAAG,IAAIZ,IAAI,CAACc,SAAL,CAAeG,YAAnB,CACdT,QADc,EAEdG,OAAO,CAACK,mBAAR,IAA+B,KAFjB,CAAf;AAIA;AACD,KAZD,MAYO;AACNJ,MAAAA,YAAY,GAAGJ,QAAf;AACA;;AAED,SAAKU,IAAL,GAAY,IAAIlB,IAAJ,CAASY,YAAT,CAAZ;;AAEA,QAAIF,OAAJ,EAAa;AACZ,WAAKA,OAAL,GAAe,IAAIN,GAAJ,CAAQQ,YAAR,CAAf;AACA,WAAKO,QAAL,GAAgB,KAAKT,OAAL,CAAaS,QAAb,EAAhB;AACA;;AAED,QAAIR,OAAO,CAACS,cAAZ,EAA4B;AAC3B,WAAKF,IAAL,CAAUG,GAAV,CAAcD,cAAd,GAA+BT,OAAO,CAACS,cAAvC;AACA;;AACD,SAAKE,SAAL,GAAiB,IAAIpB,SAAJ,CAAcU,YAAd,EAA4BH,SAA5B,EAAuC,KAAKS,IAA5C,EAAkDP,OAAlD,CAAjB;AACA,SAAKY,WAAL,GAAmBlB,iBAAiB,CAACmB,IAAlB,CAAuBf,SAAvB,CAAnB;AACA,SAAKgB,iBAAL,GAAyBpB,iBAAiB,CAACqB,UAAlB,CAA6BjB,SAA7B,CAAzB;AACA,SAAKkB,WAAL,GAAmBtB,iBAAiB,CAACuB,IAAlB,CAAuBnB,SAAvB,CAAnB;AACA,SAAKoB,gBAAL,GAAwBxB,iBAAiB,CAACyB,SAAlB,CAA4BrB,SAA5B,CAAxB;AACA,SAAKsB,gBAAL,GAAwB1B,iBAAiB,CAAC2B,SAAlB,CAA4BvB,SAA5B,CAAxB;AACAwB,IAAAA,OAAO,CAACC,GAAR,CAAa,eAAczB,SAAU,EAArC,EAAwCJ,iBAAxC;AACA;;AAEa,QAAR8B,QAAQ,GAAG;AAChB,SAAKzB,OAAL,CAAayB,QAAb,CAAsB,KAAKhB,QAA3B;AACA;;AAEDiB,EAAAA,UAAU,CAACC,OAAD,EAAUC,MAAV,EAAkB;AAC3B,SAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAIrC,OAAJ,CAAY,KAAKmB,SAAjB,EAA4Be,OAA5B,EAAqCC,MAArC,CAAnB;AACA;;AAEDG,EAAAA,WAAW,CAACjC,QAAD,EAAWC,SAAX,EAAsB;AAChC,SAAKS,IAAL,CAAUuB,WAAV,CAAsBjC,QAAtB;AACA,SAAKc,SAAL,CAAemB,WAAf,CAA2BjC,QAA3B,EAAqCC,SAArC;AACA,SAAKiC,SAAL,CAAeC,YAAf,CAA4BlC,SAA5B;AACA;;AAEDmC,EAAAA,iBAAiB,CAACC,OAAD,EAAU;AAC1B,SAAK3B,IAAL,CAAUG,GAAV,CAAcD,cAAd,GAA+ByB,OAA/B;AACA,SAAKvB,SAAL,CAAesB,iBAAf,CAAiCC,OAAjC;AACA;;AAEDC,EAAAA,iBAAiB,GAAG;AACnB,WAAO,KAAK5B,IAAL,CAAUG,GAAV,CAAcD,cAArB;AACA;;AAED2B,EAAAA,WAAW,CAACF,OAAD,EAAU;AACpB,UAAMG,UAAU,GAAG,KAAK9B,IAAL,CAAUG,GAAV,CAAckB,QAAd,CAAuBU,MAAvB,CAA8BC,GAA9B,CAAkCL,OAAO,CAACM,UAA1C,CAAnB;;AAEA,QACC,CAACH,UAAD,IACCH,OAAO,CAACR,OAAR,IACAQ,OAAO,CAACR,OAAR,CAAgBe,WAAhB,OAAkCJ,UAAU,CAACX,OAAX,CAAmBe,WAAnB,EAHpC,EAIE;AACD,YAAM,IAAIC,KAAJ,CAAW;AACpB,mBAAmBR,OAAO,CAACR,OAAQ,SAC/BW,UAAU,GAAGA,UAAU,CAACX,OAAd,GAAwB,IAClC,EAHK,CAAN;AAIA;AACD;;AAEDiB,EAAAA,MAAM,CAACC,CAAD,EAAI;AACT,WAAOtD,SAAS,CAACsD,CAAD,CAAhB;AACA;;AA/EgB","sourcesContent":["import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contracts } from './lib/contracts.js'\nimport { Account } from './lib/accounts.js'\nimport { EVM } from './lib/evm.js'\nimport { contractAddresses } from './lib/constants'\n\nexport class Quic {\n\tconstructor(provider, networkId, testing, options) {\n\t\tvar realProvider\n\n\t\tif (typeof provider === 'string') {\n\t\t\tif (provider.includes('wss')) {\n\t\t\t\trealProvider = new Web3.providers.WebsocketProvider(\n\t\t\t\t\tprovider,\n\t\t\t\t\toptions.ethereumNodeTimeout || 10000,\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\trealProvider = new Web3.providers.HttpProvider(\n\t\t\t\t\tprovider,\n\t\t\t\t\toptions.ethereumNodeTimeout || 10000,\n\t\t\t\t)\n\t\t\t}\n\t\t} else {\n\t\t\trealProvider = provider\n\t\t}\n\n\t\tthis.web3 = new Web3(realProvider)\n\n\t\tif (testing) {\n\t\t\tthis.testing = new EVM(realProvider)\n\t\t\tthis.snapshot = this.testing.snapshot()\n\t\t}\n\n\t\tif (options.defaultAccount) {\n\t\t\tthis.web3.eth.defaultAccount = options.defaultAccount\n\t\t}\n\t\tthis.contracts = new Contracts(realProvider, networkId, this.web3, options)\n\t\tthis.quicAddress = contractAddresses.quic[networkId]\n\t\tthis.masterChefAddress = contractAddresses.masterChef[networkId]\n\t\tthis.wethAddress = contractAddresses.weth[networkId]\n\t\tthis.wethPriceAddress = contractAddresses.wethPrice[networkId]\n\t\tthis.quicPriceAddress = contractAddresses.quicPrice[networkId]\n\t\tconsole.log(`network Id: ${networkId}`, contractAddresses)\n\t}\n\n\tasync resetEVM() {\n\t\tthis.testing.resetEVM(this.snapshot)\n\t}\n\n\taddAccount(address, number) {\n\t\tthis.accounts.push(new Account(this.contracts, address, number))\n\t}\n\n\tsetProvider(provider, networkId) {\n\t\tthis.web3.setProvider(provider)\n\t\tthis.contracts.setProvider(provider, networkId)\n\t\tthis.operation.setNetworkId(networkId)\n\t}\n\n\tsetDefaultAccount(account) {\n\t\tthis.web3.eth.defaultAccount = account\n\t\tthis.contracts.setDefaultAccount(account)\n\t}\n\n\tgetDefaultAccount() {\n\t\treturn this.web3.eth.defaultAccount\n\t}\n\n\tloadAccount(account) {\n\t\tconst newAccount = this.web3.eth.accounts.wallet.add(account.privateKey)\n\n\t\tif (\n\t\t\t!newAccount ||\n\t\t\t(account.address &&\n\t\t\t\taccount.address.toLowerCase() !== newAccount.address.toLowerCase())\n\t\t) {\n\t\t\tthrow new Error(`Loaded account address mismatch.\n        Expected ${account.address}, got ${\n\t\t\t\tnewAccount ? newAccount.address : null\n\t\t\t}`)\n\t\t}\n\t}\n\n\ttoBigN(a) {\n\t\treturn BigNumber(a)\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}