{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'bignumber.js';\nimport { useWallet } from 'use-wallet';\nimport { getWethPrice, getBaoPrice } from '../quic/utils';\nimport useLockedEarnings from './useLockedEarnings';\nimport useBao from './useQuic';\n\nconst useValues = () => {\n  const {\n    account\n  } = useWallet();\n  const quic = useBao();\n  const locks = useLockedEarnings(); //const wethPriceContract = getWethPriceContract(quic)\n  //const quicPriceContract = getBaoPriceContract(quic)\n\n  const [usrText, setUsrText] = useState(new String());\n  const [quicPrices, setBaoPrices] = useState(new BigNumber(0));\n  const [wethPrices, setWethPrices] = useState(new BigNumber(0));\n  const getInfo = useCallback(async () => {\n    console.log(quic);\n\n    if (quic) {\n      const wethPriceFun = getWethPrice(quic).then(response => {\n        setWethPrices(response);\n        const quicPriceFun = getBaoPrice(quic).then(response => {\n          setBaoPrices(response);\n          console.log('quicvalues');\n          console.log(response);\n          const currentRate = wethPrices.dividedBy(100000000).dividedBy(quicPrices);\n          const userValue = currentRate.multipliedBy(locks.dividedBy(1000000000000000000));\n          const dailyPrice = userValue.dividedBy(1095).toFormat(2);\n          console.log(dailyPrice + ' dailyPrice');\n          console.log(wethPrices + ' wethprice');\n          console.log(quicPrices + ' quicPrice');\n          const annualPrice = userValue.dividedBy(3).toFormat(2);\n          console.log(annualPrice + ' annual');\n          const wethText = userValue.toFormat(2);\n          const usrText1 = 'Your Locked BAO is worth approximately $' + wethText + '';\n          setUsrText(usrText1);\n          console.log(usrText);\n        });\n      });\n    }\n  }, [locks, usrText]);\n  useEffect(() => {\n    if (account && quic) {\n      getInfo();\n    }\n  }, [account, quic, locks, usrText]);\n  return usrText.toString();\n};\n\nexport default useValues;","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/quic.finance/client/src/hooks/useValues.ts"],"names":["useCallback","useEffect","useState","BigNumber","useWallet","getWethPrice","getBaoPrice","useLockedEarnings","useBao","useValues","account","quic","locks","usrText","setUsrText","String","quicPrices","setBaoPrices","wethPrices","setWethPrices","getInfo","console","log","wethPriceFun","then","response","quicPriceFun","currentRate","dividedBy","userValue","multipliedBy","dailyPrice","toFormat","annualPrice","wethText","usrText1","toString"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAGA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,SACEC,YADF,EAEEC,WAFF,QAKO,eALP;AAMA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAGA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAmCN,SAAS,EAAlD;AACA,QAAMO,IAAI,GAAGH,MAAM,EAAnB;AACA,QAAMI,KAAK,GAAGL,iBAAiB,EAA/B,CAHsB,CAItB;AACA;;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAIa,MAAJ,EAAD,CAAtC;AACA,QAAM,CAACC,UAAD,EAAaC,YAAb,IAA6Bf,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CAA3C;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CAA5C;AAEA,QAAMiB,OAAO,GAAGpB,WAAW,CAAC,YAAY;AACtCqB,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;;AACA,QAAIA,IAAJ,EAAU;AACR,YAAMY,YAAY,GAAGlB,YAAY,CAACM,IAAD,CAAZ,CAAmBa,IAAnB,CAAyBC,QAAD,IAAc;AACzDN,QAAAA,aAAa,CAACM,QAAD,CAAb;AAEA,cAAMC,YAAY,GAAGpB,WAAW,CAACK,IAAD,CAAX,CAAkBa,IAAlB,CAAwBC,QAAD,IAAc;AACxDR,UAAAA,YAAY,CAACQ,QAAD,CAAZ;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACA,gBAAME,WAAW,GAAGT,UAAU,CAC3BU,SADiB,CACP,SADO,EAEjBA,SAFiB,CAEPZ,UAFO,CAApB;AAGA,gBAAMa,SAAS,GAAGF,WAAW,CAACG,YAAZ,CAChBlB,KAAK,CAACgB,SAAN,CAAgB,mBAAhB,CADgB,CAAlB;AAGA,gBAAMG,UAAU,GAAGF,SAAS,CAACD,SAAV,CAAoB,IAApB,EAA0BI,QAA1B,CAAmC,CAAnC,CAAnB;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAYS,UAAU,GAAG,aAAzB;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAU,GAAG,YAAzB;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAYN,UAAU,GAAG,YAAzB;AACA,gBAAMiB,WAAW,GAAGJ,SAAS,CAACD,SAAV,CAAoB,CAApB,EAAuBI,QAAvB,CAAgC,CAAhC,CAApB;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAYW,WAAW,GAAG,SAA1B;AACA,gBAAMC,QAAQ,GAAGL,SAAS,CAACG,QAAV,CAAmB,CAAnB,CAAjB;AACA,gBAAMG,QAAQ,GAAG,6CAA6CD,QAA7C,GAAwD,EAAzE;AACApB,UAAAA,UAAU,CAACqB,QAAD,CAAV;AACAd,UAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ;AACD,SApBoB,CAArB;AAqBD,OAxBoB,CAArB;AAyBD;AACF,GA7B0B,EA6BxB,CAACD,KAAD,EAAQC,OAAR,CA7BwB,CAA3B;AA+BAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,OAAO,IAAIC,IAAf,EAAqB;AACnBS,MAAAA,OAAO;AACR;AACF,GAJQ,EAIN,CAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,OAAvB,CAJM,CAAT;AAMA,SAAOA,OAAO,CAACuB,QAAR,EAAP;AACD,CAhDD;;AAkDA,eAAe3B,SAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { provider } from 'web3-core'\n\nimport { BigNumber } from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\n\nimport {\n  getWethPrice,\n  getBaoPrice,\n  getWethPriceContract,\n  getBaoPriceContract,\n} from '../quic/utils'\nimport useLockedEarnings from './useLockedEarnings'\nimport useBao from './useQuic'\nimport useBlock from './useBlock'\n\nconst useValues = () => {\n  const { account }: { account: string } = useWallet()\n  const quic = useBao()\n  const locks = useLockedEarnings()\n  //const wethPriceContract = getWethPriceContract(quic)\n  //const quicPriceContract = getBaoPriceContract(quic)\n  const [usrText, setUsrText] = useState(new String())\n  const [quicPrices, setBaoPrices] = useState(new BigNumber(0))\n  const [wethPrices, setWethPrices] = useState(new BigNumber(0))\n\n  const getInfo = useCallback(async () => {\n    console.log(quic)\n    if (quic) {\n      const wethPriceFun = getWethPrice(quic).then((response) => {\n        setWethPrices(response)\n\n        const quicPriceFun = getBaoPrice(quic).then((response) => {\n          setBaoPrices(response)\n          console.log('quicvalues')\n          console.log(response)\n          const currentRate = wethPrices\n            .dividedBy(100000000)\n            .dividedBy(quicPrices)\n          const userValue = currentRate.multipliedBy(\n            locks.dividedBy(1000000000000000000),\n          )\n          const dailyPrice = userValue.dividedBy(1095).toFormat(2)\n          console.log(dailyPrice + ' dailyPrice')\n          console.log(wethPrices + ' wethprice')\n          console.log(quicPrices + ' quicPrice')\n          const annualPrice = userValue.dividedBy(3).toFormat(2)\n          console.log(annualPrice + ' annual')\n          const wethText = userValue.toFormat(2)\n          const usrText1 = 'Your Locked BAO is worth approximately $' + wethText + ''\n          setUsrText(usrText1)\n          console.log(usrText)\n        })\n      })\n    }\n  }, [locks, usrText])\n\n  useEffect(() => {\n    if (account && quic) {\n      getInfo()\n    }\n  }, [account, quic, locks, usrText])\n\n  return usrText.toString()\n}\n\nexport default useValues\n"]},"metadata":{},"sourceType":"module"}