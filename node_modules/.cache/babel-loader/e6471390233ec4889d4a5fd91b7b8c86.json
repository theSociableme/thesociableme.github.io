{"ast":null,"code":"var _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/quic.finance/client/src/contexts/Transactions/TransactionsProvider.tsx\";\nimport React, { useCallback, useEffect, useReducer } from 'react';\nimport Context from './context';\nimport reducer, { initialState, setTransactions, addTransaction } from './reducer';\n\nconst TransactionsProvider = ({\n  children\n}) => {\n  const [{\n    initialized,\n    transactions\n  }, dispatch] = useReducer(reducer, initialState);\n  const handleAddTransaction = useCallback(tx => {\n    dispatch(addTransaction(tx));\n  }, [dispatch]);\n  const fetchTransactions = useCallback(async () => {\n    try {\n      const txsRaw = localStorage.getItem('transactions') || \"\";\n      const txs = JSON.parse(txsRaw) || {};\n      dispatch(setTransactions(txs));\n    } catch (e) {\n      console.log(e);\n    }\n  }, [dispatch]);\n  useEffect(() => {\n    if (initialized) {\n      localStorage.setItem('transactions', JSON.stringify(transactions));\n    }\n  }, [initialized, transactions]);\n  useEffect(() => {\n    fetchTransactions();\n  }, [fetchTransactions]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      transactions,\n      onAddTransaction: handleAddTransaction\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 3\n    }\n  }, children);\n};\n\nexport default TransactionsProvider;","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/quic.finance/client/src/contexts/Transactions/TransactionsProvider.tsx"],"names":["React","useCallback","useEffect","useReducer","Context","reducer","initialState","setTransactions","addTransaction","TransactionsProvider","children","initialized","transactions","dispatch","handleAddTransaction","tx","fetchTransactions","txsRaw","localStorage","getItem","txs","JSON","parse","e","console","log","setItem","stringify","onAddTransaction"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,UAAxC,QAA0D,OAA1D;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,IACCC,YADD,EAECC,eAFD,EAGCC,cAHD,QAIO,WAJP;;AAOA,MAAMC,oBAA8B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACxD,QAAM,CAAC;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAD,EAAgCC,QAAhC,IAA4CV,UAAU,CAC3DE,OAD2D,EAE3DC,YAF2D,CAA5D;AAKA,QAAMQ,oBAAoB,GAAGb,WAAW,CACtCc,EAAD,IAAqB;AACpBF,IAAAA,QAAQ,CAACL,cAAc,CAACO,EAAD,CAAf,CAAR;AACA,GAHsC,EAIvC,CAACF,QAAD,CAJuC,CAAxC;AAOA,QAAMG,iBAAiB,GAAGf,WAAW,CAAC,YAAY;AACjD,QAAI;AACH,YAAMgB,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,KAAwC,EAAvD;AACA,YAAMC,GAAG,GAAIC,IAAI,CAACC,KAAL,CAAWL,MAAX,CAAD,IAA2C,EAAvD;AACAJ,MAAAA,QAAQ,CAACN,eAAe,CAACa,GAAD,CAAhB,CAAR;AACA,KAJD,CAIE,OAAOG,CAAP,EAAU;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA;AACD,GARoC,EAQlC,CAACV,QAAD,CARkC,CAArC;AAUAX,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIS,WAAJ,EAAiB;AAChBO,MAAAA,YAAY,CAACQ,OAAb,CAAqB,cAArB,EAAqCL,IAAI,CAACM,SAAL,CAAef,YAAf,CAArC;AACA;AACD,GAJQ,EAIN,CAACD,WAAD,EAAcC,YAAd,CAJM,CAAT;AAMAV,EAAAA,SAAS,CAAC,MAAM;AACfc,IAAAA,iBAAiB;AACjB,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;AAIA,sBACC,oBAAC,OAAD,CAAS,QAAT;AACC,IAAA,KAAK,EAAE;AACNJ,MAAAA,YADM;AAENgB,MAAAA,gBAAgB,EAAEd;AAFZ,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMEJ,QANF,CADD;AAUA,CA3CD;;AA6CA,eAAeD,oBAAf","sourcesContent":["import React, { useCallback, useEffect, useReducer } from 'react'\n\nimport Context from './context'\nimport reducer, {\n\tinitialState,\n\tsetTransactions,\n\taddTransaction,\n} from './reducer'\nimport { Transaction, TransactionsMap } from './types'\n\nconst TransactionsProvider: React.FC = ({ children }) => {\n\tconst [{ initialized, transactions }, dispatch] = useReducer(\n\t\treducer,\n\t\tinitialState,\n\t)\n\n\tconst handleAddTransaction = useCallback(\n\t\t(tx: Transaction) => {\n\t\t\tdispatch(addTransaction(tx))\n\t\t},\n\t\t[dispatch],\n\t)\n\n\tconst fetchTransactions = useCallback(async () => {\n\t\ttry {\n\t\t\tconst txsRaw = localStorage.getItem('transactions') || \"\"\n\t\t\tconst txs = (JSON.parse(txsRaw) as TransactionsMap) || {}\n\t\t\tdispatch(setTransactions(txs))\n\t\t} catch (e) {\n\t\t\tconsole.log(e)\n\t\t}\n\t}, [dispatch])\n\n\tuseEffect(() => {\n\t\tif (initialized) {\n\t\t\tlocalStorage.setItem('transactions', JSON.stringify(transactions))\n\t\t}\n\t}, [initialized, transactions])\n\n\tuseEffect(() => {\n\t\tfetchTransactions()\n\t}, [fetchTransactions])\n\n\treturn (\n\t\t<Context.Provider\n\t\t\tvalue={{\n\t\t\t\ttransactions,\n\t\t\t\tonAddTransaction: handleAddTransaction,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</Context.Provider>\n\t)\n}\n\nexport default TransactionsProvider\n"]},"metadata":{},"sourceType":"module"}