{"ast":null,"code":"import Web3 from 'web3';\nimport ERC20ABI from '../constants/abi/ERC20.json';\nexport const getContract = (provider, address) => {\n  const web3 = new Web3(provider);\n  const contract = new web3.eth.Contract(ERC20ABI.abi, address);\n  return contract;\n};\nexport const getAllowance = async (lpContract, masterChefContract, account) => {\n  try {\n    const allowance = await lpContract.methods.allowance(account, masterChefContract.options.address).call();\n    return allowance;\n  } catch (e) {\n    return '0';\n  }\n};\nexport const getBalance = async (provider, tokenAddress, userAddress) => {\n  const lpContract = getContract(provider, tokenAddress);\n\n  try {\n    const balance = await lpContract.methods.balanceOf(userAddress).call();\n    return balance;\n  } catch (e) {\n    return '0';\n  }\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/quic.finance/client/src/utils/erc20.ts"],"names":["Web3","ERC20ABI","getContract","provider","address","web3","contract","eth","Contract","abi","getAllowance","lpContract","masterChefContract","account","allowance","methods","options","call","e","getBalance","tokenAddress","userAddress","balance","balanceOf"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAIA,OAAOC,QAAP,MAAqB,6BAArB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAqBC,OAArB,KAAyC;AAClE,QAAMC,IAAI,GAAG,IAAIL,IAAJ,CAASG,QAAT,CAAb;AACA,QAAMG,QAAQ,GAAG,IAAID,IAAI,CAACE,GAAL,CAASC,QAAb,CACdP,QAAQ,CAACQ,GADK,EAEfL,OAFe,CAAjB;AAIA,SAAOE,QAAP;AACD,CAPM;AASP,OAAO,MAAMI,YAAY,GAAG,OAC1BC,UAD0B,EAE1BC,kBAF0B,EAG1BC,OAH0B,KAIN;AACpB,MAAI;AACF,UAAMC,SAAiB,GAAG,MAAMH,UAAU,CAACI,OAAX,CAC7BD,SAD6B,CACnBD,OADmB,EACVD,kBAAkB,CAACI,OAAnB,CAA2BZ,OADjB,EAE7Ba,IAF6B,EAAhC;AAGA,WAAOH,SAAP;AACD,GALD,CAKE,OAAOI,CAAP,EAAU;AACV,WAAO,GAAP;AACD;AACF,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAG,OACxBhB,QADwB,EAExBiB,YAFwB,EAGxBC,WAHwB,KAIJ;AACpB,QAAMV,UAAU,GAAGT,WAAW,CAACC,QAAD,EAAWiB,YAAX,CAA9B;;AACA,MAAI;AACF,UAAME,OAAe,GAAG,MAAMX,UAAU,CAACI,OAAX,CAC3BQ,SAD2B,CACjBF,WADiB,EAE3BJ,IAF2B,EAA9B;AAGA,WAAOK,OAAP;AACD,GALD,CAKE,OAAOJ,CAAP,EAAU;AACV,WAAO,GAAP;AACD;AACF,CAdM","sourcesContent":["import Web3 from 'web3'\nimport { provider } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport ERC20ABI from '../constants/abi/ERC20.json'\n\nexport const getContract = (provider: provider, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(\n    (ERC20ABI.abi as unknown) as AbiItem,\n    address,\n  )\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods\n      .allowance(account, masterChefContract.options.address)\n      .call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getBalance = async (\n  provider: provider,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const lpContract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await lpContract.methods\n      .balanceOf(userAddress)\n      .call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n"]},"metadata":{},"sourceType":"module"}