{"ast":null,"code":"import BigNumber from 'bignumber.js/bignumber';\nimport Web3 from 'web3';\nimport * as Types from './types.js';\nimport { SUBTRACT_GAS_LIMIT, contractAddresses, supportedPools } from './constants.js';\nimport UNIV2PairAbi from './abi/uni_v2_lp.json';\nimport BaoAbi from './abi/quic.json';\nimport MasterChefAbi from './abi/masterchef.json';\nimport ERC20Abi from './abi/erc20.json';\nimport WETHAbi from './abi/weth.json';\nimport UniOracleABI from './abi/unioracle.json';\nimport ChainOracle from './abi/chainoracle.json';\nexport class Contracts {\n  constructor(provider, networkId, web3, options) {\n    this.web3 = web3;\n    this.defaultConfirmations = options.defaultConfirmations;\n    this.autoGasMultiplier = options.autoGasMultiplier || 1.1;\n    this.confirmationType = options.confirmationType || Types.ConfirmationType.Confirmed;\n    this.defaultGas = options.defaultGas;\n    this.defaultGasPrice = options.defaultGasPrice;\n    this.quic = new this.web3.eth.Contract(BaoAbi);\n    this.masterChef = new this.web3.eth.Contract(MasterChefAbi);\n    this.weth = new this.web3.eth.Contract(WETHAbi);\n    this.wethPrice = new this.web3.eth.Contract(ChainOracle);\n    this.baoPrice = new this.web3.eth.Contract(UniOracleABI);\n    this.pools = supportedPools.map(pool => Object.assign(pool, {\n      lpAddress: pool.lpAddresses[networkId],\n      tokenAddress: pool.tokenAddresses[networkId],\n      lpContract: new this.web3.eth.Contract(UNIV2PairAbi),\n      tokenContract: new this.web3.eth.Contract(ERC20Abi)\n    }));\n    this.setProvider(provider, networkId);\n    this.setDefaultAccount(this.web3.eth.defaultAccount);\n  }\n\n  setProvider(provider, networkId) {\n    const setProvider = (contract, address) => {\n      contract.setProvider(provider);\n      if (address) contract.options.address = address;else console.error('Contract address not found in network', networkId);\n    };\n\n    setProvider(this.bao, contractAddresses.bao[networkId]);\n    setProvider(this.masterChef, contractAddresses.masterChef[networkId]);\n    setProvider(this.weth, contractAddresses.weth[networkId]);\n    setProvider(this.wethPrice, contractAddresses.wethPrice[networkId]);\n    setProvider(this.baoPrice, contractAddresses.baoPrice[networkId]);\n    this.pools.forEach(({\n      lpContract,\n      lpAddress,\n      tokenContract,\n      tokenAddress\n    }) => {\n      setProvider(lpContract, lpAddress);\n      setProvider(tokenContract, tokenAddress);\n    });\n  }\n\n  setDefaultAccount(account) {\n    this.bao.options.from = account;\n    this.masterChef.options.from = account;\n    this.wethPrice.options.from = account;\n    this.baoPrice.options.from = account;\n  }\n\n  async callContractFunction(method, options) {\n    const {\n      confirmations,\n      confirmationType,\n      autoGasMultiplier,\n      ...txOptions\n    } = options;\n\n    if (!this.blockGasLimit) {\n      await this.setGasLimit();\n    }\n\n    if (!txOptions.gasPrice && this.defaultGasPrice) {\n      txOptions.gasPrice = this.defaultGasPrice;\n    }\n\n    if (confirmationType === Types.ConfirmationType.Simulate || !options.gas) {\n      let gasEstimate;\n\n      if (this.defaultGas && confirmationType !== Types.ConfirmationType.Simulate) {\n        txOptions.gas = this.defaultGas;\n      } else {\n        try {\n          console.log('estimating gas');\n          gasEstimate = await method.estimateGas(txOptions);\n        } catch (error) {\n          const data = method.encodeABI();\n          const {\n            from,\n            value\n          } = options;\n          const to = method._parent._address;\n          error.transactionData = {\n            from,\n            value,\n            data,\n            to\n          };\n          throw error;\n        }\n\n        const multiplier = autoGasMultiplier || this.autoGasMultiplier;\n        const totalGas = Math.floor(gasEstimate * multiplier);\n        txOptions.gas = totalGas < this.blockGasLimit ? totalGas : this.blockGasLimit;\n      }\n\n      if (confirmationType === Types.ConfirmationType.Simulate) {\n        let g = txOptions.gas;\n        return {\n          gasEstimate,\n          g\n        };\n      }\n    }\n\n    if (txOptions.value) {\n      txOptions.value = new BigNumber(txOptions.value).toFixed(0);\n    } else {\n      txOptions.value = '0';\n    }\n\n    const promi = method.send(txOptions);\n    const OUTCOMES = {\n      INITIAL: 0,\n      RESOLVED: 1,\n      REJECTED: 2\n    };\n    let hashOutcome = OUTCOMES.INITIAL;\n    let confirmationOutcome = OUTCOMES.INITIAL;\n    const t = confirmationType !== undefined ? confirmationType : this.confirmationType;\n\n    if (!Object.values(Types.ConfirmationType).includes(t)) {\n      throw new Error(`Invalid confirmation type: ${t}`);\n    }\n\n    let hashPromise;\n    let confirmationPromise;\n\n    if (t === Types.ConfirmationType.Hash || t === Types.ConfirmationType.Both) {\n      hashPromise = new Promise((resolve, reject) => {\n        promi.on('error', error => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.REJECTED;\n            reject(error);\n            const anyPromi = promi;\n            anyPromi.off();\n          }\n        });\n        promi.on('transactionHash', txHash => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.RESOLVED;\n            resolve(txHash);\n\n            if (t !== Types.ConfirmationType.Both) {\n              const anyPromi = promi;\n              anyPromi.off();\n            }\n          }\n        });\n      });\n    }\n\n    if (t === Types.ConfirmationType.Confirmed || t === Types.ConfirmationType.Both) {\n      confirmationPromise = new Promise((resolve, reject) => {\n        promi.on('error', error => {\n          if ((t === Types.ConfirmationType.Confirmed || hashOutcome === OUTCOMES.RESOLVED) && confirmationOutcome === OUTCOMES.INITIAL) {\n            confirmationOutcome = OUTCOMES.REJECTED;\n            reject(error);\n            const anyPromi = promi;\n            anyPromi.off();\n          }\n        });\n        const desiredConf = confirmations || this.defaultConfirmations;\n\n        if (desiredConf) {\n          promi.on('confirmation', (confNumber, receipt) => {\n            if (confNumber >= desiredConf) {\n              if (confirmationOutcome === OUTCOMES.INITIAL) {\n                confirmationOutcome = OUTCOMES.RESOLVED;\n                resolve(receipt);\n                const anyPromi = promi;\n                anyPromi.off();\n              }\n            }\n          });\n        } else {\n          promi.on('receipt', receipt => {\n            confirmationOutcome = OUTCOMES.RESOLVED;\n            resolve(receipt);\n            const anyPromi = promi;\n            anyPromi.off();\n          });\n        }\n      });\n    }\n\n    if (t === Types.ConfirmationType.Hash) {\n      const transactionHash = await hashPromise;\n\n      if (this.notifier) {\n        this.notifier.hash(transactionHash);\n      }\n\n      return {\n        transactionHash\n      };\n    }\n\n    if (t === Types.ConfirmationType.Confirmed) {\n      return confirmationPromise;\n    }\n\n    const transactionHash = await hashPromise;\n\n    if (this.notifier) {\n      this.notifier.hash(transactionHash);\n    }\n\n    return {\n      transactionHash,\n      confirmation: confirmationPromise\n    };\n  }\n\n  async callConstantContractFunction(method, options) {\n    const m2 = method;\n    const {\n      blockNumber,\n      ...txOptions\n    } = options;\n    return m2.call(txOptions, blockNumber);\n  }\n\n  async setGasLimit() {\n    const block = await this.web3.eth.getBlock('latest');\n    this.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT;\n  }\n\n}","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/quic.finance/client/src/quic/lib/contracts.js"],"names":["BigNumber","Web3","Types","SUBTRACT_GAS_LIMIT","contractAddresses","supportedPools","UNIV2PairAbi","BaoAbi","MasterChefAbi","ERC20Abi","WETHAbi","UniOracleABI","ChainOracle","Contracts","constructor","provider","networkId","web3","options","defaultConfirmations","autoGasMultiplier","confirmationType","ConfirmationType","Confirmed","defaultGas","defaultGasPrice","quic","eth","Contract","masterChef","weth","wethPrice","baoPrice","pools","map","pool","Object","assign","lpAddress","lpAddresses","tokenAddress","tokenAddresses","lpContract","tokenContract","setProvider","setDefaultAccount","defaultAccount","contract","address","console","error","bao","forEach","account","from","callContractFunction","method","confirmations","txOptions","blockGasLimit","setGasLimit","gasPrice","Simulate","gas","gasEstimate","log","estimateGas","data","encodeABI","value","to","_parent","_address","transactionData","multiplier","totalGas","Math","floor","g","toFixed","promi","send","OUTCOMES","INITIAL","RESOLVED","REJECTED","hashOutcome","confirmationOutcome","t","undefined","values","includes","Error","hashPromise","confirmationPromise","Hash","Both","Promise","resolve","reject","on","anyPromi","off","txHash","desiredConf","confNumber","receipt","transactionHash","notifier","hash","confirmation","callConstantContractFunction","m2","blockNumber","call","block","getBlock","gasLimit"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB;AACA,SACCC,kBADD,EAECC,iBAFD,EAGCC,cAHD,QAIO,gBAJP;AAMA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,OAAO,MAAMC,SAAN,CAAgB;AACtBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsBC,IAAtB,EAA4BC,OAA5B,EAAqC;AAC/C,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKE,oBAAL,GAA4BD,OAAO,CAACC,oBAApC;AACA,SAAKC,iBAAL,GAAyBF,OAAO,CAACE,iBAAR,IAA6B,GAAtD;AACA,SAAKC,gBAAL,GACCH,OAAO,CAACG,gBAAR,IAA4BnB,KAAK,CAACoB,gBAAN,CAAuBC,SADpD;AAEA,SAAKC,UAAL,GAAkBN,OAAO,CAACM,UAA1B;AACA,SAAKC,eAAL,GAAuBP,OAAO,CAACO,eAA/B;AAEA,SAAKC,IAAL,GAAY,IAAI,KAAKT,IAAL,CAAUU,GAAV,CAAcC,QAAlB,CAA2BrB,MAA3B,CAAZ;AACA,SAAKsB,UAAL,GAAkB,IAAI,KAAKZ,IAAL,CAAUU,GAAV,CAAcC,QAAlB,CAA2BpB,aAA3B,CAAlB;AACA,SAAKsB,IAAL,GAAY,IAAI,KAAKb,IAAL,CAAUU,GAAV,CAAcC,QAAlB,CAA2BlB,OAA3B,CAAZ;AACA,SAAKqB,SAAL,GAAiB,IAAI,KAAKd,IAAL,CAAUU,GAAV,CAAcC,QAAlB,CAA2BhB,WAA3B,CAAjB;AACA,SAAKoB,QAAL,GAAgB,IAAI,KAAKf,IAAL,CAAUU,GAAV,CAAcC,QAAlB,CAA2BjB,YAA3B,CAAhB;AAEA,SAAKsB,KAAL,GAAa5B,cAAc,CAAC6B,GAAf,CAAoBC,IAAD,IAC/BC,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAoB;AACnBG,MAAAA,SAAS,EAAEH,IAAI,CAACI,WAAL,CAAiBvB,SAAjB,CADQ;AAEnBwB,MAAAA,YAAY,EAAEL,IAAI,CAACM,cAAL,CAAoBzB,SAApB,CAFK;AAGnB0B,MAAAA,UAAU,EAAE,IAAI,KAAKzB,IAAL,CAAUU,GAAV,CAAcC,QAAlB,CAA2BtB,YAA3B,CAHO;AAInBqC,MAAAA,aAAa,EAAE,IAAI,KAAK1B,IAAL,CAAUU,GAAV,CAAcC,QAAlB,CAA2BnB,QAA3B;AAJI,KAApB,CADY,CAAb;AASA,SAAKmC,WAAL,CAAiB7B,QAAjB,EAA2BC,SAA3B;AACA,SAAK6B,iBAAL,CAAuB,KAAK5B,IAAL,CAAUU,GAAV,CAAcmB,cAArC;AACA;;AAEDF,EAAAA,WAAW,CAAC7B,QAAD,EAAWC,SAAX,EAAsB;AAChC,UAAM4B,WAAW,GAAG,CAACG,QAAD,EAAWC,OAAX,KAAuB;AAC1CD,MAAAA,QAAQ,CAACH,WAAT,CAAqB7B,QAArB;AACA,UAAIiC,OAAJ,EAAaD,QAAQ,CAAC7B,OAAT,CAAiB8B,OAAjB,GAA2BA,OAA3B,CAAb,KACKC,OAAO,CAACC,KAAR,CAAc,uCAAd,EAAuDlC,SAAvD;AACL,KAJD;;AAMA4B,IAAAA,WAAW,CAAC,KAAKO,GAAN,EAAW/C,iBAAiB,CAAC+C,GAAlB,CAAsBnC,SAAtB,CAAX,CAAX;AACA4B,IAAAA,WAAW,CAAC,KAAKf,UAAN,EAAkBzB,iBAAiB,CAACyB,UAAlB,CAA6Bb,SAA7B,CAAlB,CAAX;AACA4B,IAAAA,WAAW,CAAC,KAAKd,IAAN,EAAY1B,iBAAiB,CAAC0B,IAAlB,CAAuBd,SAAvB,CAAZ,CAAX;AACA4B,IAAAA,WAAW,CAAC,KAAKb,SAAN,EAAiB3B,iBAAiB,CAAC2B,SAAlB,CAA4Bf,SAA5B,CAAjB,CAAX;AACA4B,IAAAA,WAAW,CAAC,KAAKZ,QAAN,EAAgB5B,iBAAiB,CAAC4B,QAAlB,CAA2BhB,SAA3B,CAAhB,CAAX;AAEA,SAAKiB,KAAL,CAAWmB,OAAX,CACC,CAAC;AAAEV,MAAAA,UAAF;AAAcJ,MAAAA,SAAd;AAAyBK,MAAAA,aAAzB;AAAwCH,MAAAA;AAAxC,KAAD,KAA4D;AAC3DI,MAAAA,WAAW,CAACF,UAAD,EAAaJ,SAAb,CAAX;AACAM,MAAAA,WAAW,CAACD,aAAD,EAAgBH,YAAhB,CAAX;AACA,KAJF;AAMA;;AAEDK,EAAAA,iBAAiB,CAACQ,OAAD,EAAU;AAC1B,SAAKF,GAAL,CAASjC,OAAT,CAAiBoC,IAAjB,GAAwBD,OAAxB;AACA,SAAKxB,UAAL,CAAgBX,OAAhB,CAAwBoC,IAAxB,GAA+BD,OAA/B;AACA,SAAKtB,SAAL,CAAeb,OAAf,CAAuBoC,IAAvB,GAA8BD,OAA9B;AACA,SAAKrB,QAAL,CAAcd,OAAd,CAAsBoC,IAAtB,GAA6BD,OAA7B;AACA;;AAEyB,QAApBE,oBAAoB,CAACC,MAAD,EAAStC,OAAT,EAAkB;AAC3C,UAAM;AACLuC,MAAAA,aADK;AAELpC,MAAAA,gBAFK;AAGLD,MAAAA,iBAHK;AAIL,SAAGsC;AAJE,QAKFxC,OALJ;;AAOA,QAAI,CAAC,KAAKyC,aAAV,EAAyB;AACxB,YAAM,KAAKC,WAAL,EAAN;AACA;;AAED,QAAI,CAACF,SAAS,CAACG,QAAX,IAAuB,KAAKpC,eAAhC,EAAiD;AAChDiC,MAAAA,SAAS,CAACG,QAAV,GAAqB,KAAKpC,eAA1B;AACA;;AAED,QAAIJ,gBAAgB,KAAKnB,KAAK,CAACoB,gBAAN,CAAuBwC,QAA5C,IAAwD,CAAC5C,OAAO,CAAC6C,GAArE,EAA0E;AACzE,UAAIC,WAAJ;;AACA,UACC,KAAKxC,UAAL,IACAH,gBAAgB,KAAKnB,KAAK,CAACoB,gBAAN,CAAuBwC,QAF7C,EAGE;AACDJ,QAAAA,SAAS,CAACK,GAAV,GAAgB,KAAKvC,UAArB;AACA,OALD,MAKO;AACN,YAAI;AACHyB,UAAAA,OAAO,CAACgB,GAAR,CAAY,gBAAZ;AACAD,UAAAA,WAAW,GAAG,MAAMR,MAAM,CAACU,WAAP,CAAmBR,SAAnB,CAApB;AACA,SAHD,CAGE,OAAOR,KAAP,EAAc;AACf,gBAAMiB,IAAI,GAAGX,MAAM,CAACY,SAAP,EAAb;AACA,gBAAM;AAAEd,YAAAA,IAAF;AAAQe,YAAAA;AAAR,cAAkBnD,OAAxB;AACA,gBAAMoD,EAAE,GAAGd,MAAM,CAACe,OAAP,CAAeC,QAA1B;AACAtB,UAAAA,KAAK,CAACuB,eAAN,GAAwB;AAAEnB,YAAAA,IAAF;AAAQe,YAAAA,KAAR;AAAeF,YAAAA,IAAf;AAAqBG,YAAAA;AAArB,WAAxB;AACA,gBAAMpB,KAAN;AACA;;AAED,cAAMwB,UAAU,GAAGtD,iBAAiB,IAAI,KAAKA,iBAA7C;AACA,cAAMuD,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWb,WAAW,GAAGU,UAAzB,CAAjB;AACAhB,QAAAA,SAAS,CAACK,GAAV,GACCY,QAAQ,GAAG,KAAKhB,aAAhB,GAAgCgB,QAAhC,GAA2C,KAAKhB,aADjD;AAEA;;AAED,UAAItC,gBAAgB,KAAKnB,KAAK,CAACoB,gBAAN,CAAuBwC,QAAhD,EAA0D;AACzD,YAAIgB,CAAC,GAAGpB,SAAS,CAACK,GAAlB;AACA,eAAO;AAAEC,UAAAA,WAAF;AAAec,UAAAA;AAAf,SAAP;AACA;AACD;;AAED,QAAIpB,SAAS,CAACW,KAAd,EAAqB;AACpBX,MAAAA,SAAS,CAACW,KAAV,GAAkB,IAAIrE,SAAJ,CAAc0D,SAAS,CAACW,KAAxB,EAA+BU,OAA/B,CAAuC,CAAvC,CAAlB;AACA,KAFD,MAEO;AACNrB,MAAAA,SAAS,CAACW,KAAV,GAAkB,GAAlB;AACA;;AAED,UAAMW,KAAK,GAAGxB,MAAM,CAACyB,IAAP,CAAYvB,SAAZ,CAAd;AAEA,UAAMwB,QAAQ,GAAG;AAChBC,MAAAA,OAAO,EAAE,CADO;AAEhBC,MAAAA,QAAQ,EAAE,CAFM;AAGhBC,MAAAA,QAAQ,EAAE;AAHM,KAAjB;AAMA,QAAIC,WAAW,GAAGJ,QAAQ,CAACC,OAA3B;AACA,QAAII,mBAAmB,GAAGL,QAAQ,CAACC,OAAnC;AAEA,UAAMK,CAAC,GACNnE,gBAAgB,KAAKoE,SAArB,GAAiCpE,gBAAjC,GAAoD,KAAKA,gBAD1D;;AAGA,QAAI,CAACe,MAAM,CAACsD,MAAP,CAAcxF,KAAK,CAACoB,gBAApB,EAAsCqE,QAAtC,CAA+CH,CAA/C,CAAL,EAAwD;AACvD,YAAM,IAAII,KAAJ,CAAW,8BAA6BJ,CAAE,EAA1C,CAAN;AACA;;AAED,QAAIK,WAAJ;AACA,QAAIC,mBAAJ;;AAEA,QACCN,CAAC,KAAKtF,KAAK,CAACoB,gBAAN,CAAuByE,IAA7B,IACAP,CAAC,KAAKtF,KAAK,CAACoB,gBAAN,CAAuB0E,IAF9B,EAGE;AACDH,MAAAA,WAAW,GAAG,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9CnB,QAAAA,KAAK,CAACoB,EAAN,CAAS,OAAT,EAAmBlD,KAAD,IAAW;AAC5B,cAAIoC,WAAW,KAAKJ,QAAQ,CAACC,OAA7B,EAAsC;AACrCG,YAAAA,WAAW,GAAGJ,QAAQ,CAACG,QAAvB;AACAc,YAAAA,MAAM,CAACjD,KAAD,CAAN;AACA,kBAAMmD,QAAQ,GAAGrB,KAAjB;AACAqB,YAAAA,QAAQ,CAACC,GAAT;AACA;AACD,SAPD;AASAtB,QAAAA,KAAK,CAACoB,EAAN,CAAS,iBAAT,EAA6BG,MAAD,IAAY;AACvC,cAAIjB,WAAW,KAAKJ,QAAQ,CAACC,OAA7B,EAAsC;AACrCG,YAAAA,WAAW,GAAGJ,QAAQ,CAACE,QAAvB;AACAc,YAAAA,OAAO,CAACK,MAAD,CAAP;;AACA,gBAAIf,CAAC,KAAKtF,KAAK,CAACoB,gBAAN,CAAuB0E,IAAjC,EAAuC;AACtC,oBAAMK,QAAQ,GAAGrB,KAAjB;AACAqB,cAAAA,QAAQ,CAACC,GAAT;AACA;AACD;AACD,SATD;AAUA,OApBa,CAAd;AAqBA;;AAED,QACCd,CAAC,KAAKtF,KAAK,CAACoB,gBAAN,CAAuBC,SAA7B,IACAiE,CAAC,KAAKtF,KAAK,CAACoB,gBAAN,CAAuB0E,IAF9B,EAGE;AACDF,MAAAA,mBAAmB,GAAG,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtDnB,QAAAA,KAAK,CAACoB,EAAN,CAAS,OAAT,EAAmBlD,KAAD,IAAW;AAC5B,cACC,CAACsC,CAAC,KAAKtF,KAAK,CAACoB,gBAAN,CAAuBC,SAA7B,IACA+D,WAAW,KAAKJ,QAAQ,CAACE,QAD1B,KAEAG,mBAAmB,KAAKL,QAAQ,CAACC,OAHlC,EAIE;AACDI,YAAAA,mBAAmB,GAAGL,QAAQ,CAACG,QAA/B;AACAc,YAAAA,MAAM,CAACjD,KAAD,CAAN;AACA,kBAAMmD,QAAQ,GAAGrB,KAAjB;AACAqB,YAAAA,QAAQ,CAACC,GAAT;AACA;AACD,SAXD;AAaA,cAAME,WAAW,GAAG/C,aAAa,IAAI,KAAKtC,oBAA1C;;AACA,YAAIqF,WAAJ,EAAiB;AAChBxB,UAAAA,KAAK,CAACoB,EAAN,CAAS,cAAT,EAAyB,CAACK,UAAD,EAAaC,OAAb,KAAyB;AACjD,gBAAID,UAAU,IAAID,WAAlB,EAA+B;AAC9B,kBAAIjB,mBAAmB,KAAKL,QAAQ,CAACC,OAArC,EAA8C;AAC7CI,gBAAAA,mBAAmB,GAAGL,QAAQ,CAACE,QAA/B;AACAc,gBAAAA,OAAO,CAACQ,OAAD,CAAP;AACA,sBAAML,QAAQ,GAAGrB,KAAjB;AACAqB,gBAAAA,QAAQ,CAACC,GAAT;AACA;AACD;AACD,WATD;AAUA,SAXD,MAWO;AACNtB,UAAAA,KAAK,CAACoB,EAAN,CAAS,SAAT,EAAqBM,OAAD,IAAa;AAChCnB,YAAAA,mBAAmB,GAAGL,QAAQ,CAACE,QAA/B;AACAc,YAAAA,OAAO,CAACQ,OAAD,CAAP;AACA,kBAAML,QAAQ,GAAGrB,KAAjB;AACAqB,YAAAA,QAAQ,CAACC,GAAT;AACA,WALD;AAMA;AACD,OAlCqB,CAAtB;AAmCA;;AAED,QAAId,CAAC,KAAKtF,KAAK,CAACoB,gBAAN,CAAuByE,IAAjC,EAAuC;AACtC,YAAMY,eAAe,GAAG,MAAMd,WAA9B;;AACA,UAAI,KAAKe,QAAT,EAAmB;AAClB,aAAKA,QAAL,CAAcC,IAAd,CAAmBF,eAAnB;AACA;;AACD,aAAO;AAAEA,QAAAA;AAAF,OAAP;AACA;;AAED,QAAInB,CAAC,KAAKtF,KAAK,CAACoB,gBAAN,CAAuBC,SAAjC,EAA4C;AAC3C,aAAOuE,mBAAP;AACA;;AAED,UAAMa,eAAe,GAAG,MAAMd,WAA9B;;AACA,QAAI,KAAKe,QAAT,EAAmB;AAClB,WAAKA,QAAL,CAAcC,IAAd,CAAmBF,eAAnB;AACA;;AACD,WAAO;AACNA,MAAAA,eADM;AAENG,MAAAA,YAAY,EAAEhB;AAFR,KAAP;AAIA;;AAEiC,QAA5BiB,4BAA4B,CAACvD,MAAD,EAAStC,OAAT,EAAkB;AACnD,UAAM8F,EAAE,GAAGxD,MAAX;AACA,UAAM;AAAEyD,MAAAA,WAAF;AAAe,SAAGvD;AAAlB,QAAgCxC,OAAtC;AACA,WAAO8F,EAAE,CAACE,IAAH,CAAQxD,SAAR,EAAmBuD,WAAnB,CAAP;AACA;;AAEgB,QAAXrD,WAAW,GAAG;AACnB,UAAMuD,KAAK,GAAG,MAAM,KAAKlG,IAAL,CAAUU,GAAV,CAAcyF,QAAd,CAAuB,QAAvB,CAApB;AACA,SAAKzD,aAAL,GAAqBwD,KAAK,CAACE,QAAN,GAAiBlH,kBAAtC;AACA;;AAtOqB","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\nimport Web3 from 'web3'\nimport * as Types from './types.js'\nimport {\n\tSUBTRACT_GAS_LIMIT,\n\tcontractAddresses,\n\tsupportedPools,\n} from './constants.js'\n\nimport UNIV2PairAbi from './abi/uni_v2_lp.json'\nimport BaoAbi from './abi/quic.json'\nimport MasterChefAbi from './abi/masterchef.json'\nimport ERC20Abi from './abi/erc20.json'\nimport WETHAbi from './abi/weth.json'\nimport UniOracleABI from './abi/unioracle.json'\nimport ChainOracle from './abi/chainoracle.json'\n\nexport class Contracts {\n\tconstructor(provider, networkId, web3, options) {\n\t\tthis.web3 = web3\n\t\tthis.defaultConfirmations = options.defaultConfirmations\n\t\tthis.autoGasMultiplier = options.autoGasMultiplier || 1.1\n\t\tthis.confirmationType =\n\t\t\toptions.confirmationType || Types.ConfirmationType.Confirmed\n\t\tthis.defaultGas = options.defaultGas\n\t\tthis.defaultGasPrice = options.defaultGasPrice\n\n\t\tthis.quic = new this.web3.eth.Contract(BaoAbi)\n\t\tthis.masterChef = new this.web3.eth.Contract(MasterChefAbi)\n\t\tthis.weth = new this.web3.eth.Contract(WETHAbi)\n\t\tthis.wethPrice = new this.web3.eth.Contract(ChainOracle)\n\t\tthis.baoPrice = new this.web3.eth.Contract(UniOracleABI)\n\n\t\tthis.pools = supportedPools.map((pool) =>\n\t\t\tObject.assign(pool, {\n\t\t\t\tlpAddress: pool.lpAddresses[networkId],\n\t\t\t\ttokenAddress: pool.tokenAddresses[networkId],\n\t\t\t\tlpContract: new this.web3.eth.Contract(UNIV2PairAbi),\n\t\t\t\ttokenContract: new this.web3.eth.Contract(ERC20Abi),\n\t\t\t}),\n\t\t)\n\n\t\tthis.setProvider(provider, networkId)\n\t\tthis.setDefaultAccount(this.web3.eth.defaultAccount)\n\t}\n\n\tsetProvider(provider, networkId) {\n\t\tconst setProvider = (contract, address) => {\n\t\t\tcontract.setProvider(provider)\n\t\t\tif (address) contract.options.address = address\n\t\t\telse console.error('Contract address not found in network', networkId)\n\t\t}\n\n\t\tsetProvider(this.bao, contractAddresses.bao[networkId])\n\t\tsetProvider(this.masterChef, contractAddresses.masterChef[networkId])\n\t\tsetProvider(this.weth, contractAddresses.weth[networkId])\n\t\tsetProvider(this.wethPrice, contractAddresses.wethPrice[networkId])\n\t\tsetProvider(this.baoPrice, contractAddresses.baoPrice[networkId])\n\n\t\tthis.pools.forEach(\n\t\t\t({ lpContract, lpAddress, tokenContract, tokenAddress }) => {\n\t\t\t\tsetProvider(lpContract, lpAddress)\n\t\t\t\tsetProvider(tokenContract, tokenAddress)\n\t\t\t},\n\t\t)\n\t}\n\n\tsetDefaultAccount(account) {\n\t\tthis.bao.options.from = account\n\t\tthis.masterChef.options.from = account\n\t\tthis.wethPrice.options.from = account\n\t\tthis.baoPrice.options.from = account\n\t}\n\n\tasync callContractFunction(method, options) {\n\t\tconst {\n\t\t\tconfirmations,\n\t\t\tconfirmationType,\n\t\t\tautoGasMultiplier,\n\t\t\t...txOptions\n\t\t} = options\n\n\t\tif (!this.blockGasLimit) {\n\t\t\tawait this.setGasLimit()\n\t\t}\n\n\t\tif (!txOptions.gasPrice && this.defaultGasPrice) {\n\t\t\ttxOptions.gasPrice = this.defaultGasPrice\n\t\t}\n\n\t\tif (confirmationType === Types.ConfirmationType.Simulate || !options.gas) {\n\t\t\tlet gasEstimate\n\t\t\tif (\n\t\t\t\tthis.defaultGas &&\n\t\t\t\tconfirmationType !== Types.ConfirmationType.Simulate\n\t\t\t) {\n\t\t\t\ttxOptions.gas = this.defaultGas\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log('estimating gas')\n\t\t\t\t\tgasEstimate = await method.estimateGas(txOptions)\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconst data = method.encodeABI()\n\t\t\t\t\tconst { from, value } = options\n\t\t\t\t\tconst to = method._parent._address\n\t\t\t\t\terror.transactionData = { from, value, data, to }\n\t\t\t\t\tthrow error\n\t\t\t\t}\n\n\t\t\t\tconst multiplier = autoGasMultiplier || this.autoGasMultiplier\n\t\t\t\tconst totalGas = Math.floor(gasEstimate * multiplier)\n\t\t\t\ttxOptions.gas =\n\t\t\t\t\ttotalGas < this.blockGasLimit ? totalGas : this.blockGasLimit\n\t\t\t}\n\n\t\t\tif (confirmationType === Types.ConfirmationType.Simulate) {\n\t\t\t\tlet g = txOptions.gas\n\t\t\t\treturn { gasEstimate, g }\n\t\t\t}\n\t\t}\n\n\t\tif (txOptions.value) {\n\t\t\ttxOptions.value = new BigNumber(txOptions.value).toFixed(0)\n\t\t} else {\n\t\t\ttxOptions.value = '0'\n\t\t}\n\n\t\tconst promi = method.send(txOptions)\n\n\t\tconst OUTCOMES = {\n\t\t\tINITIAL: 0,\n\t\t\tRESOLVED: 1,\n\t\t\tREJECTED: 2,\n\t\t}\n\n\t\tlet hashOutcome = OUTCOMES.INITIAL\n\t\tlet confirmationOutcome = OUTCOMES.INITIAL\n\n\t\tconst t =\n\t\t\tconfirmationType !== undefined ? confirmationType : this.confirmationType\n\n\t\tif (!Object.values(Types.ConfirmationType).includes(t)) {\n\t\t\tthrow new Error(`Invalid confirmation type: ${t}`)\n\t\t}\n\n\t\tlet hashPromise\n\t\tlet confirmationPromise\n\n\t\tif (\n\t\t\tt === Types.ConfirmationType.Hash ||\n\t\t\tt === Types.ConfirmationType.Both\n\t\t) {\n\t\t\thashPromise = new Promise((resolve, reject) => {\n\t\t\t\tpromi.on('error', (error) => {\n\t\t\t\t\tif (hashOutcome === OUTCOMES.INITIAL) {\n\t\t\t\t\t\thashOutcome = OUTCOMES.REJECTED\n\t\t\t\t\t\treject(error)\n\t\t\t\t\t\tconst anyPromi = promi\n\t\t\t\t\t\tanyPromi.off()\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tpromi.on('transactionHash', (txHash) => {\n\t\t\t\t\tif (hashOutcome === OUTCOMES.INITIAL) {\n\t\t\t\t\t\thashOutcome = OUTCOMES.RESOLVED\n\t\t\t\t\t\tresolve(txHash)\n\t\t\t\t\t\tif (t !== Types.ConfirmationType.Both) {\n\t\t\t\t\t\t\tconst anyPromi = promi\n\t\t\t\t\t\t\tanyPromi.off()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\tif (\n\t\t\tt === Types.ConfirmationType.Confirmed ||\n\t\t\tt === Types.ConfirmationType.Both\n\t\t) {\n\t\t\tconfirmationPromise = new Promise((resolve, reject) => {\n\t\t\t\tpromi.on('error', (error) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(t === Types.ConfirmationType.Confirmed ||\n\t\t\t\t\t\t\thashOutcome === OUTCOMES.RESOLVED) &&\n\t\t\t\t\t\tconfirmationOutcome === OUTCOMES.INITIAL\n\t\t\t\t\t) {\n\t\t\t\t\t\tconfirmationOutcome = OUTCOMES.REJECTED\n\t\t\t\t\t\treject(error)\n\t\t\t\t\t\tconst anyPromi = promi\n\t\t\t\t\t\tanyPromi.off()\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tconst desiredConf = confirmations || this.defaultConfirmations\n\t\t\t\tif (desiredConf) {\n\t\t\t\t\tpromi.on('confirmation', (confNumber, receipt) => {\n\t\t\t\t\t\tif (confNumber >= desiredConf) {\n\t\t\t\t\t\t\tif (confirmationOutcome === OUTCOMES.INITIAL) {\n\t\t\t\t\t\t\t\tconfirmationOutcome = OUTCOMES.RESOLVED\n\t\t\t\t\t\t\t\tresolve(receipt)\n\t\t\t\t\t\t\t\tconst anyPromi = promi\n\t\t\t\t\t\t\t\tanyPromi.off()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tpromi.on('receipt', (receipt) => {\n\t\t\t\t\t\tconfirmationOutcome = OUTCOMES.RESOLVED\n\t\t\t\t\t\tresolve(receipt)\n\t\t\t\t\t\tconst anyPromi = promi\n\t\t\t\t\t\tanyPromi.off()\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif (t === Types.ConfirmationType.Hash) {\n\t\t\tconst transactionHash = await hashPromise\n\t\t\tif (this.notifier) {\n\t\t\t\tthis.notifier.hash(transactionHash)\n\t\t\t}\n\t\t\treturn { transactionHash }\n\t\t}\n\n\t\tif (t === Types.ConfirmationType.Confirmed) {\n\t\t\treturn confirmationPromise\n\t\t}\n\n\t\tconst transactionHash = await hashPromise\n\t\tif (this.notifier) {\n\t\t\tthis.notifier.hash(transactionHash)\n\t\t}\n\t\treturn {\n\t\t\ttransactionHash,\n\t\t\tconfirmation: confirmationPromise,\n\t\t}\n\t}\n\n\tasync callConstantContractFunction(method, options) {\n\t\tconst m2 = method\n\t\tconst { blockNumber, ...txOptions } = options\n\t\treturn m2.call(txOptions, blockNumber)\n\t}\n\n\tasync setGasLimit() {\n\t\tconst block = await this.web3.eth.getBlock('latest')\n\t\tthis.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}