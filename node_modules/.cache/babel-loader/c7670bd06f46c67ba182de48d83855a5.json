{"ast":null,"code":"const ADD_TRANSACTION = 'ADD_TRANSACTION';\nconst RECEIVE_TX_RECEIPT = 'RECEIVE_TX_RECEIPT';\nconst SET_TRANSACTIONS = 'SET_TRANSACTIONS';\nexport const addTransaction = transaction => ({\n  type: ADD_TRANSACTION,\n  transaction\n});\nexport const receiveTxReceipt = (txHash, receipt) => ({\n  type: RECEIVE_TX_RECEIPT,\n  txHash,\n  receipt\n});\nexport const setTransactions = transactions => ({\n  type: SET_TRANSACTIONS,\n  transactions\n});\nexport const initialState = {\n  initialized: false,\n  transactions: {}\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ADD_TRANSACTION:\n      return { ...state,\n        transactions: { ...state.transactions,\n          [action.transaction.hash]: action.transaction\n        }\n      };\n\n    case RECEIVE_TX_RECEIPT:\n      return { ...state,\n        transactions: { ...state.transactions,\n          [action.txHash]: { ...state.transactions[action.txHash],\n            receipt: action.receipt\n          }\n        }\n      };\n\n    case SET_TRANSACTIONS:\n      return { ...state,\n        transactions: action.transactions,\n        initialized: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/quic.finance/client/src/contexts/Transactions/reducer.ts"],"names":["ADD_TRANSACTION","RECEIVE_TX_RECEIPT","SET_TRANSACTIONS","addTransaction","transaction","type","receiveTxReceipt","txHash","receipt","setTransactions","transactions","initialState","initialized","reducer","state","action","hash"],"mappings":"AAGA,MAAMA,eAAe,GAAG,iBAAxB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AA4BA,OAAO,MAAMC,cAAc,GACzBC,WAD4B,KAEF;AAC1BC,EAAAA,IAAI,EAAEL,eADoB;AAE1BI,EAAAA;AAF0B,CAFE,CAAvB;AAOP,OAAO,MAAME,gBAAgB,GAAG,CAC9BC,MAD8B,EAE9BC,OAF8B,MAGF;AAC5BH,EAAAA,IAAI,EAAEJ,kBADsB;AAE5BM,EAAAA,MAF4B;AAG5BC,EAAAA;AAH4B,CAHE,CAAzB;AASP,OAAO,MAAMC,eAAe,GAC1BC,YAD6B,KAEF;AAC3BL,EAAAA,IAAI,EAAEH,gBADqB;AAE3BQ,EAAAA;AAF2B,CAFE,CAAxB;AAOP,OAAO,MAAMC,YAA+B,GAAG;AAC7CC,EAAAA,WAAW,EAAE,KADgC;AAE7CF,EAAAA,YAAY,EAAE;AAF+B,CAAxC;;AAKP,MAAMG,OAAO,GAAG,CACdC,KADc,EAEdC,MAFc,KAGQ;AACtB,UAAQA,MAAM,CAACV,IAAf;AACE,SAAKL,eAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELJ,QAAAA,YAAY,EAAE,EACZ,GAAGI,KAAK,CAACJ,YADG;AAEZ,WAACK,MAAM,CAACX,WAAP,CAAmBY,IAApB,GAA2BD,MAAM,CAACX;AAFtB;AAFT,OAAP;;AAOF,SAAKH,kBAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELJ,QAAAA,YAAY,EAAE,EACZ,GAAGI,KAAK,CAACJ,YADG;AAEZ,WAACK,MAAM,CAACR,MAAR,GAAiB,EACf,GAAGO,KAAK,CAACJ,YAAN,CAAmBK,MAAM,CAACR,MAA1B,CADY;AAEfC,YAAAA,OAAO,EAAEO,MAAM,CAACP;AAFD;AAFL;AAFT,OAAP;;AAUF,SAAKN,gBAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELJ,QAAAA,YAAY,EAAEK,MAAM,CAACL,YAFhB;AAGLE,QAAAA,WAAW,EAAE;AAHR,OAAP;;AAKF;AACE,aAAOE,KAAP;AA3BJ;AA6BD,CAjCD;;AAmCA,eAAeD,OAAf","sourcesContent":["import { TransactionReceipt } from 'web3-core'\nimport { Transaction, TransactionsMap } from './types'\n\nconst ADD_TRANSACTION = 'ADD_TRANSACTION'\nconst RECEIVE_TX_RECEIPT = 'RECEIVE_TX_RECEIPT'\nconst SET_TRANSACTIONS = 'SET_TRANSACTIONS'\n\ninterface AddTransactionAction {\n  type: typeof ADD_TRANSACTION\n  transaction: Transaction\n}\n\ninterface ReceiveTxReceiptAction {\n  type: typeof RECEIVE_TX_RECEIPT\n  txHash: string\n  receipt: TransactionReceipt\n}\n\ninterface SetTransactionsAction {\n  type: typeof SET_TRANSACTIONS\n  transactions: TransactionsMap\n}\n\ntype TransactionsActions =\n  | AddTransactionAction\n  | ReceiveTxReceiptAction\n  | SetTransactionsAction\n\nexport interface TransactionsState {\n  initialized: boolean\n  transactions: TransactionsMap\n}\n\nexport const addTransaction = (\n  transaction: Transaction,\n): AddTransactionAction => ({\n  type: ADD_TRANSACTION,\n  transaction,\n})\n\nexport const receiveTxReceipt = (\n  txHash: string,\n  receipt: TransactionReceipt,\n): ReceiveTxReceiptAction => ({\n  type: RECEIVE_TX_RECEIPT,\n  txHash,\n  receipt,\n})\n\nexport const setTransactions = (\n  transactions: TransactionsMap,\n): SetTransactionsAction => ({\n  type: SET_TRANSACTIONS,\n  transactions,\n})\n\nexport const initialState: TransactionsState = {\n  initialized: false,\n  transactions: {},\n}\n\nconst reducer = (\n  state: TransactionsState,\n  action: TransactionsActions,\n): TransactionsState => {\n  switch (action.type) {\n    case ADD_TRANSACTION:\n      return {\n        ...state,\n        transactions: {\n          ...state.transactions,\n          [action.transaction.hash]: action.transaction,\n        },\n      }\n    case RECEIVE_TX_RECEIPT:\n      return {\n        ...state,\n        transactions: {\n          ...state.transactions,\n          [action.txHash]: {\n            ...state.transactions[action.txHash],\n            receipt: action.receipt,\n          },\n        },\n      }\n    case SET_TRANSACTIONS:\n      return {\n        ...state,\n        transactions: action.transactions,\n        initialized: true,\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}