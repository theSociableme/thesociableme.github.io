{"ast":null,"code":"import { cloneElement, Component, createRef, createElement } from 'react';\nimport { number, element, func, oneOfType, instanceOf, string, bool } from 'prop-types';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction zeroPad(value) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var strValue = String(value);\n  if (length === 0) return strValue;\n  var match = strValue.match(/(.*?)([0-9]+)(.*)/);\n  var prefix = match ? match[1] : '';\n  var suffix = match ? match[3] : '';\n  var strNo = match ? match[2] : strValue;\n  var paddedNo = strNo.length >= length ? strNo : (_toConsumableArray(Array(length)).map(function () {\n    return '0';\n  }).join('') + strNo).slice(length * -1);\n  return \"\".concat(prefix).concat(paddedNo).concat(suffix);\n}\n\nvar timeDeltaFormatOptionsDefaults = {\n  daysInHours: false,\n  zeroPadTime: 2\n};\n\nfunction calcTimeDelta(date) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$now = options.now,\n      now = _options$now === void 0 ? Date.now : _options$now,\n      _options$precision = options.precision,\n      precision = _options$precision === void 0 ? 0 : _options$precision,\n      controlled = options.controlled,\n      _options$offsetTime = options.offsetTime,\n      offsetTime = _options$offsetTime === void 0 ? 0 : _options$offsetTime,\n      overtime = options.overtime;\n  var startTimestamp;\n\n  if (typeof date === 'string') {\n    startTimestamp = new Date(date).getTime();\n  } else if (date instanceof Date) {\n    startTimestamp = date.getTime();\n  } else {\n    startTimestamp = date;\n  }\n\n  if (!controlled) {\n    startTimestamp += offsetTime;\n  }\n\n  var timeLeft = controlled ? startTimestamp : startTimestamp - now();\n  var clampedPrecision = Math.min(20, Math.max(0, precision));\n  var total = Math.round(parseFloat(((overtime ? timeLeft : Math.max(0, timeLeft)) / 1000).toFixed(clampedPrecision)) * 1000);\n  var seconds = Math.abs(total) / 1000;\n  return {\n    total: total,\n    days: Math.floor(seconds / (3600 * 24)),\n    hours: Math.floor(seconds / 3600 % 24),\n    minutes: Math.floor(seconds / 60 % 60),\n    seconds: Math.floor(seconds % 60),\n    milliseconds: Number((seconds % 1 * 1000).toFixed()),\n    completed: total <= 0\n  };\n}\n\nfunction formatTimeDelta(timeDelta, options) {\n  var days = timeDelta.days,\n      hours = timeDelta.hours,\n      minutes = timeDelta.minutes,\n      seconds = timeDelta.seconds;\n\n  var _Object$assign = Object.assign(Object.assign({}, timeDeltaFormatOptionsDefaults), options),\n      daysInHours = _Object$assign.daysInHours,\n      zeroPadTime = _Object$assign.zeroPadTime,\n      _Object$assign$zeroPa = _Object$assign.zeroPadDays,\n      zeroPadDays = _Object$assign$zeroPa === void 0 ? zeroPadTime : _Object$assign$zeroPa;\n\n  var zeroPadTimeLength = Math.min(2, zeroPadTime);\n  var formattedHours = daysInHours ? zeroPad(hours + days * 24, zeroPadTime) : zeroPad(hours, zeroPadTimeLength);\n  return {\n    days: daysInHours ? '' : zeroPad(days, zeroPadDays),\n    hours: formattedHours,\n    minutes: zeroPad(minutes, zeroPadTimeLength),\n    seconds: zeroPad(seconds, zeroPadTimeLength)\n  };\n}\n\nvar Countdown = function (_React$Component) {\n  _inherits(Countdown, _React$Component);\n\n  var _super = _createSuper(Countdown);\n\n  function Countdown() {\n    var _this;\n\n    _classCallCheck(this, Countdown);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      count: _this.props.count || 3\n    };\n\n    _this.startCountdown = function () {\n      _this.interval = window.setInterval(function () {\n        var count = _this.state.count - 1;\n\n        if (count === 0) {\n          _this.stopCountdown();\n\n          _this.props.onComplete && _this.props.onComplete();\n        } else {\n          _this.setState(function (prevState) {\n            return {\n              count: prevState.count - 1\n            };\n          });\n        }\n      }, 1000);\n    };\n\n    _this.stopCountdown = function () {\n      clearInterval(_this.interval);\n    };\n\n    _this.addTime = function (seconds) {\n      _this.stopCountdown();\n\n      _this.setState(function (prevState) {\n        return {\n          count: prevState.count + seconds\n        };\n      }, _this.startCountdown);\n    };\n\n    return _this;\n  }\n\n  _createClass(Countdown, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startCountdown();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children ? cloneElement(this.props.children, {\n        count: this.state.count\n      }) : null;\n    }\n  }]);\n\n  return Countdown;\n}(Component);\n\nCountdown.propTypes = {\n  count: number,\n  children: element,\n  onComplete: func\n};\n\nvar Countdown$1 = function (_React$Component) {\n  _inherits(Countdown$1, _React$Component);\n\n  var _super = _createSuper(Countdown$1);\n\n  function Countdown$1(props) {\n    var _this;\n\n    _classCallCheck(this, Countdown$1);\n\n    _this = _super.call(this, props);\n    _this.mounted = false;\n    _this.initialTimestamp = _this.calcOffsetStartTimestamp();\n    _this.offsetStartTimestamp = _this.props.autoStart ? 0 : _this.initialTimestamp;\n    _this.offsetTime = 0;\n    _this.legacyMode = false;\n    _this.legacyCountdownRef = createRef();\n\n    _this.tick = function () {\n      var timeDelta = _this.calcTimeDelta();\n\n      var callback = timeDelta.completed && !_this.props.overtime ? undefined : _this.props.onTick;\n\n      _this.setTimeDeltaState(timeDelta, undefined, callback);\n    };\n\n    _this.start = function () {\n      if (_this.isStarted()) return;\n      var prevOffsetStartTimestamp = _this.offsetStartTimestamp;\n      _this.offsetStartTimestamp = 0;\n      _this.offsetTime += prevOffsetStartTimestamp ? _this.calcOffsetStartTimestamp() - prevOffsetStartTimestamp : 0;\n\n      var timeDelta = _this.calcTimeDelta();\n\n      _this.setTimeDeltaState(timeDelta, \"STARTED\", _this.props.onStart);\n\n      if (!_this.props.controlled && (!timeDelta.completed || _this.props.overtime)) {\n        _this.clearTimer();\n\n        _this.interval = window.setInterval(_this.tick, _this.props.intervalDelay);\n      }\n    };\n\n    _this.pause = function () {\n      if (_this.isPaused()) return;\n\n      _this.clearTimer();\n\n      _this.offsetStartTimestamp = _this.calcOffsetStartTimestamp();\n\n      _this.setTimeDeltaState(_this.state.timeDelta, \"PAUSED\", _this.props.onPause);\n    };\n\n    _this.stop = function () {\n      if (_this.isStopped()) return;\n\n      _this.clearTimer();\n\n      _this.offsetStartTimestamp = _this.calcOffsetStartTimestamp();\n      _this.offsetTime = _this.offsetStartTimestamp - _this.initialTimestamp;\n\n      _this.setTimeDeltaState(_this.calcTimeDelta(), \"STOPPED\", _this.props.onStop);\n    };\n\n    _this.isStarted = function () {\n      return _this.isStatus(\"STARTED\");\n    };\n\n    _this.isPaused = function () {\n      return _this.isStatus(\"PAUSED\");\n    };\n\n    _this.isStopped = function () {\n      return _this.isStatus(\"STOPPED\");\n    };\n\n    _this.isCompleted = function () {\n      return _this.isStatus(\"COMPLETED\");\n    };\n\n    _this.handleOnComplete = function (timeDelta) {\n      if (_this.props.onComplete) _this.props.onComplete(timeDelta);\n    };\n\n    if (props.date) {\n      var timeDelta = _this.calcTimeDelta();\n\n      _this.state = {\n        timeDelta: timeDelta,\n        status: timeDelta.completed ? \"COMPLETED\" : \"STOPPED\"\n      };\n    } else {\n      _this.legacyMode = true;\n    }\n\n    return _this;\n  }\n\n  _createClass(Countdown$1, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.legacyMode) {\n        return;\n      }\n\n      this.mounted = true;\n      if (this.props.onMount) this.props.onMount(this.calcTimeDelta());\n      if (this.props.autoStart) this.start();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.legacyMode) {\n        return;\n      }\n\n      if (!this.shallowCompare(this.props, prevProps)) {\n        if (this.props.date !== prevProps.date) {\n          this.initialTimestamp = this.calcOffsetStartTimestamp();\n          this.offsetStartTimestamp = this.initialTimestamp;\n          this.offsetTime = 0;\n        }\n\n        this.setTimeDeltaState(this.calcTimeDelta());\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.legacyMode) {\n        return;\n      }\n\n      this.mounted = false;\n      this.clearTimer();\n    }\n  }, {\n    key: \"calcTimeDelta\",\n    value: function calcTimeDelta$1() {\n      var _this$props = this.props,\n          date = _this$props.date,\n          now = _this$props.now,\n          precision = _this$props.precision,\n          controlled = _this$props.controlled,\n          overtime = _this$props.overtime;\n      return calcTimeDelta(date, {\n        now: now,\n        precision: precision,\n        controlled: controlled,\n        offsetTime: this.offsetTime,\n        overtime: overtime\n      });\n    }\n  }, {\n    key: \"calcOffsetStartTimestamp\",\n    value: function calcOffsetStartTimestamp() {\n      return Date.now();\n    }\n  }, {\n    key: \"addTime\",\n    value: function addTime(seconds) {\n      this.legacyCountdownRef.current.addTime(seconds);\n    }\n  }, {\n    key: \"clearTimer\",\n    value: function clearTimer() {\n      window.clearInterval(this.interval);\n    }\n  }, {\n    key: \"isStatus\",\n    value: function isStatus(status) {\n      return this.state.status === status;\n    }\n  }, {\n    key: \"shallowCompare\",\n    value: function shallowCompare(objA, objB) {\n      var keysA = Object.keys(objA);\n      return keysA.length === Object.keys(objB).length && !keysA.some(function (keyA) {\n        var valueA = objA[keyA];\n        var valueB = objB[keyA];\n        return !objB.hasOwnProperty(keyA) || !(valueA === valueB || valueA !== valueA && valueB !== valueB);\n      });\n    }\n  }, {\n    key: \"setTimeDeltaState\",\n    value: function setTimeDeltaState(timeDelta, status, callback) {\n      var _this2 = this;\n\n      if (!this.mounted) return;\n      var completedCallback;\n\n      if (!this.state.timeDelta.completed && timeDelta.completed) {\n        if (!this.props.overtime) this.clearTimer();\n        completedCallback = this.handleOnComplete;\n      }\n\n      var onDone = function onDone() {\n        if (callback) callback(_this2.state.timeDelta);\n        if (completedCallback) completedCallback(_this2.state.timeDelta);\n      };\n\n      return this.setState(function (prevState) {\n        var newStatus = status || prevState.status;\n\n        if (timeDelta.completed && !_this2.props.overtime) {\n          newStatus = \"COMPLETED\";\n        } else if (!status && newStatus === \"COMPLETED\") {\n          newStatus = \"STOPPED\";\n        }\n\n        return {\n          timeDelta: timeDelta,\n          status: newStatus\n        };\n      }, onDone);\n    }\n  }, {\n    key: \"getApi\",\n    value: function getApi() {\n      return this.api = this.api || {\n        start: this.start,\n        pause: this.pause,\n        stop: this.stop,\n        isStarted: this.isStarted,\n        isPaused: this.isPaused,\n        isStopped: this.isStopped,\n        isCompleted: this.isCompleted\n      };\n    }\n  }, {\n    key: \"getRenderProps\",\n    value: function getRenderProps() {\n      var _this$props2 = this.props,\n          daysInHours = _this$props2.daysInHours,\n          zeroPadTime = _this$props2.zeroPadTime,\n          zeroPadDays = _this$props2.zeroPadDays;\n      var timeDelta = this.state.timeDelta;\n      return Object.assign(Object.assign({}, timeDelta), {\n        api: this.getApi(),\n        props: this.props,\n        formatted: formatTimeDelta(timeDelta, {\n          daysInHours: daysInHours,\n          zeroPadTime: zeroPadTime,\n          zeroPadDays: zeroPadDays\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.legacyMode) {\n        var _this$props3 = this.props,\n            count = _this$props3.count,\n            _children = _this$props3.children,\n            onComplete = _this$props3.onComplete;\n        return createElement(Countdown, {\n          ref: this.legacyCountdownRef,\n          count: count,\n          onComplete: onComplete\n        }, _children);\n      }\n\n      var _this$props4 = this.props,\n          className = _this$props4.className,\n          overtime = _this$props4.overtime,\n          children = _this$props4.children,\n          renderer = _this$props4.renderer;\n      var renderProps = this.getRenderProps();\n\n      if (renderer) {\n        return renderer(renderProps);\n      }\n\n      if (children && this.state.timeDelta.completed && !overtime) {\n        return cloneElement(children, {\n          countdown: renderProps\n        });\n      }\n\n      var _renderProps$formatte = renderProps.formatted,\n          days = _renderProps$formatte.days,\n          hours = _renderProps$formatte.hours,\n          minutes = _renderProps$formatte.minutes,\n          seconds = _renderProps$formatte.seconds;\n      return createElement(\"span\", {\n        className: className\n      }, renderProps.total < 0 ? '-' : '', days, days ? ':' : '', hours, \":\", minutes, \":\", seconds);\n    }\n  }]);\n\n  return Countdown$1;\n}(Component);\n\nCountdown$1.defaultProps = Object.assign(Object.assign({}, timeDeltaFormatOptionsDefaults), {\n  controlled: false,\n  intervalDelay: 1000,\n  precision: 0,\n  autoStart: true\n});\nCountdown$1.propTypes = {\n  date: oneOfType([instanceOf(Date), string, number]),\n  daysInHours: bool,\n  zeroPadTime: number,\n  zeroPadDays: number,\n  controlled: bool,\n  intervalDelay: number,\n  precision: number,\n  autoStart: bool,\n  overtime: bool,\n  className: string,\n  children: element,\n  renderer: func,\n  now: func,\n  onMount: func,\n  onStart: func,\n  onPause: func,\n  onStop: func,\n  onTick: func,\n  onComplete: func\n};\nexport default Countdown$1;\nexport { calcTimeDelta, formatTimeDelta, zeroPad };","map":null,"metadata":{},"sourceType":"module"}