{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { getMasterChefContract, getWethContract, getFarms, getTotalLPWethValue } from '../bao/utils';\nimport useBao from './useQuic';\nimport useBlock from './useBlock';\n\nconst useAllStakedValue = () => {\n  const [balances, setBalance] = useState([]);\n  const {\n    account\n  } = useWallet();\n  const bao = useBao();\n  const farms = getFarms(bao);\n  const masterChefContract = getMasterChefContract(bao);\n  const wethContract = getWethContract(bao);\n  const block = useBlock();\n  const fetchAllStakedValue = useCallback(async () => {\n    const balances = await Promise.all(farms.map(({\n      pid,\n      lpContract,\n      tokenContract,\n      tokenDecimals\n    }) => getTotalLPWethValue(masterChefContract, wethContract, lpContract, tokenContract, tokenDecimals, pid)));\n    setBalance(balances);\n  }, [account, masterChefContract, bao]);\n  useEffect(() => {\n    if (account && masterChefContract && bao) {\n      fetchAllStakedValue();\n    }\n  }, [account, block, masterChefContract, setBalance, bao]);\n  return balances;\n};\n\nexport default useAllStakedValue;","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/quic.finance/client/src/hooks/useAllStakedValue.ts"],"names":["useCallback","useEffect","useState","useWallet","getMasterChefContract","getWethContract","getFarms","getTotalLPWethValue","useBao","useBlock","useAllStakedValue","balances","setBalance","account","bao","farms","masterChefContract","wethContract","block","fetchAllStakedValue","Promise","all","map","pid","lpContract","tokenContract","tokenDecimals"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAIA,SAASC,SAAT,QAA0B,YAA1B;AAGA,SACEC,qBADF,EAEEC,eAFF,EAGEC,QAHF,EAIEC,mBAJF,QAKO,cALP;AAMA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAUA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBV,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAuDV,SAAS,EAAtE;AACA,QAAMW,GAAG,GAAGN,MAAM,EAAlB;AACA,QAAMO,KAAK,GAAGT,QAAQ,CAACQ,GAAD,CAAtB;AACA,QAAME,kBAAkB,GAAGZ,qBAAqB,CAACU,GAAD,CAAhD;AACA,QAAMG,YAAY,GAAGZ,eAAe,CAACS,GAAD,CAApC;AACA,QAAMI,KAAK,GAAGT,QAAQ,EAAtB;AAEA,QAAMU,mBAAmB,GAAGnB,WAAW,CAAC,YAAY;AAClD,UAAMW,QAA4B,GAAG,MAAMS,OAAO,CAACC,GAAR,CACzCN,KAAK,CAACO,GAAN,CACE,CAAC;AACCC,MAAAA,GADD;AAECC,MAAAA,UAFD;AAGCC,MAAAA,aAHD;AAICC,MAAAA;AAJD,KAAD,KAWEnB,mBAAmB,CACjBS,kBADiB,EAEjBC,YAFiB,EAGjBO,UAHiB,EAIjBC,aAJiB,EAKjBC,aALiB,EAMjBH,GANiB,CAZvB,CADyC,CAA3C;AAwBAX,IAAAA,UAAU,CAACD,QAAD,CAAV;AACD,GA1BsC,EA0BpC,CAACE,OAAD,EAAUG,kBAAV,EAA8BF,GAA9B,CA1BoC,CAAvC;AA4BAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,OAAO,IAAIG,kBAAX,IAAiCF,GAArC,EAA0C;AACxCK,MAAAA,mBAAmB;AACpB;AACF,GAJQ,EAIN,CAACN,OAAD,EAAUK,KAAV,EAAiBF,kBAAjB,EAAqCJ,UAArC,EAAiDE,GAAjD,CAJM,CAAT;AAMA,SAAOH,QAAP;AACD,CA5CD;;AA8CA,eAAeD,iBAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { provider } from 'web3-core'\n\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\nimport { Contract } from 'web3-eth-contract'\n\nimport {\n  getMasterChefContract,\n  getWethContract,\n  getFarms,\n  getTotalLPWethValue,\n} from '../bao/utils'\nimport useBao from './useQuic'\nimport useBlock from './useBlock'\n\nexport interface StakedValue {\n  tokenAmount: BigNumber\n  wethAmount: BigNumber\n  totalWethValue: BigNumber\n  tokenPriceInWeth: BigNumber\n  poolWeight: BigNumber\n}\n\nconst useAllStakedValue = () => {\n  const [balances, setBalance] = useState([] as Array<StakedValue>)\n  const { account }: { account: string; ethereum: provider } = useWallet()\n  const bao = useBao()\n  const farms = getFarms(bao)\n  const masterChefContract = getMasterChefContract(bao)\n  const wethContract = getWethContract(bao)\n  const block = useBlock()\n\n  const fetchAllStakedValue = useCallback(async () => {\n    const balances: Array<StakedValue> = await Promise.all(\n      farms.map(\n        ({\n          pid,\n          lpContract,\n          tokenContract,\n          tokenDecimals,\n        }: {\n          pid: number\n          lpContract: Contract\n          tokenContract: Contract\n          tokenDecimals: number\n        }) =>\n          getTotalLPWethValue(\n            masterChefContract,\n            wethContract,\n            lpContract,\n            tokenContract,\n            tokenDecimals,\n            pid,\n          ),\n      ),\n    )\n\n    setBalance(balances)\n  }, [account, masterChefContract, bao])\n\n  useEffect(() => {\n    if (account && masterChefContract && bao) {\n      fetchAllStakedValue()\n    }\n  }, [account, block, masterChefContract, setBalance, bao])\n\n  return balances\n}\n\nexport default useAllStakedValue\n"]},"metadata":{},"sourceType":"module"}