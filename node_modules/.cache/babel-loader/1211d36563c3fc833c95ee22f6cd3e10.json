{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'bignumber.js';\nimport { useWallet } from 'use-wallet';\nimport { getWethPrice, getQuicPrice, getWethPriceContract, getQuicPriceContract } from '../quic/utils';\nimport useLockedEarnings from './useLockedEarnings';\nimport useQuic from './useQuic';\n\nconst useSubValues = () => {\n  const {\n    account\n  } = useWallet();\n  const quic = useQuic();\n  const wethPriceContract = getWethPriceContract(quic);\n  const quicPriceContract = getQuicPriceContract(quic);\n  const locks = useLockedEarnings();\n  const [usrSubText, setUsrSubText] = useState(new String());\n  const [quicPrices, setQuicPrices] = useState(new BigNumber(0));\n  const [wethPrices, setWethPrices] = useState(new BigNumber(0));\n  const getInfo = useCallback(async () => {\n    if (quic) {\n      const wethPriceFun = getWethPrice(quic).then(response => {\n        setWethPrices(response);\n        const quicPriceFun = getQuicPrice(quic).then(response => {\n          setQuicPrices(response);\n          const currentRate = wethPrices.dividedBy(100000000).dividedBy(quicPrices);\n          const userValue = currentRate.multipliedBy(locks.dividedBy(1000000000000000000));\n          const dailyPrice = userValue.dividedBy(1095).toFormat(2);\n          console.log(dailyPrice + ' dailyPrice');\n          console.log(wethPrices + ' wethprice');\n          console.log(quicPrices + ' quicPrice');\n          const annualPrice = userValue.dividedBy(3).toFormat(2);\n          console.log(annualPrice + ' annual');\n          const wethText = userValue.toFormat(2);\n          const usrSubText = 'When this unlocks it will earn you $' + dailyPrice + ' per day for 3 years. The equivalent of $' + annualPrice + ' per year!';\n          setUsrSubText(usrSubText);\n        });\n      });\n    }\n  }, [locks, usrSubText]);\n  useEffect(() => {\n    if (account && quic) {\n      getInfo();\n    }\n  }, [account, quic, locks, usrSubText]);\n  return usrSubText.toString();\n};\n\nexport default useSubValues;","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/quic.finance/client/src/hooks/useSubValues.ts"],"names":["useCallback","useEffect","useState","BigNumber","useWallet","getWethPrice","getQuicPrice","getWethPriceContract","getQuicPriceContract","useLockedEarnings","useQuic","useSubValues","account","quic","wethPriceContract","quicPriceContract","locks","usrSubText","setUsrSubText","String","quicPrices","setQuicPrices","wethPrices","setWethPrices","getInfo","wethPriceFun","then","response","quicPriceFun","currentRate","dividedBy","userValue","multipliedBy","dailyPrice","toFormat","console","log","annualPrice","wethText","toString"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAGA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,SACEC,YADF,EAEEC,YAFF,EAGEC,oBAHF,EAIEC,oBAJF,QAKO,eALP;AAMA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAM;AAAEC,IAAAA;AAAF,MAAmCR,SAAS,EAAlD;AACA,QAAMS,IAAI,GAAGH,OAAO,EAApB;AACA,QAAMI,iBAAiB,GAAGP,oBAAoB,CAACM,IAAD,CAA9C;AACA,QAAME,iBAAiB,GAAGP,oBAAoB,CAACK,IAAD,CAA9C;AACA,QAAMG,KAAK,GAAGP,iBAAiB,EAA/B;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,IAAIiB,MAAJ,EAAD,CAA5C;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CAA5C;AACA,QAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CAA5C;AAEA,QAAMqB,OAAO,GAAGxB,WAAW,CAAC,YAAY;AACtC,QAAIa,IAAJ,EAAU;AACR,YAAMY,YAAY,GAAGpB,YAAY,CAACQ,IAAD,CAAZ,CAAmBa,IAAnB,CAAyBC,QAAD,IAAc;AACzDJ,QAAAA,aAAa,CAACI,QAAD,CAAb;AAEA,cAAMC,YAAY,GAAGtB,YAAY,CAACO,IAAD,CAAZ,CAAmBa,IAAnB,CAAyBC,QAAD,IAAc;AACzDN,UAAAA,aAAa,CAACM,QAAD,CAAb;AACA,gBAAME,WAAW,GAAGP,UAAU,CAC3BQ,SADiB,CACP,SADO,EAEjBA,SAFiB,CAEPV,UAFO,CAApB;AAGA,gBAAMW,SAAS,GAAGF,WAAW,CAACG,YAAZ,CAChBhB,KAAK,CAACc,SAAN,CAAgB,mBAAhB,CADgB,CAAlB;AAGA,gBAAMG,UAAU,GAAGF,SAAS,CAACD,SAAV,CAAoB,IAApB,EAA0BI,QAA1B,CAAmC,CAAnC,CAAnB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYH,UAAU,GAAG,aAAzB;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYd,UAAU,GAAG,YAAzB;AACAa,UAAAA,OAAO,CAACC,GAAR,CAAYhB,UAAU,GAAG,YAAzB;AACA,gBAAMiB,WAAW,GAAGN,SAAS,CAACD,SAAV,CAAoB,CAApB,EAAuBI,QAAvB,CAAgC,CAAhC,CAApB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYC,WAAW,GAAG,SAA1B;AACA,gBAAMC,QAAQ,GAAGP,SAAS,CAACG,QAAV,CAAmB,CAAnB,CAAjB;AACA,gBAAMjB,UAAU,GACd,yCACAgB,UADA,GAEA,2CAFA,GAGAI,WAHA,GAIA,YALF;AAMAnB,UAAAA,aAAa,CAACD,UAAD,CAAb;AACD,SAtBoB,CAArB;AAuBD,OA1BoB,CAArB;AA2BD;AACF,GA9B0B,EA8BxB,CAACD,KAAD,EAAQC,UAAR,CA9BwB,CAA3B;AAgCAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,OAAO,IAAIC,IAAf,EAAqB;AACnBW,MAAAA,OAAO;AACR;AACF,GAJQ,EAIN,CAACZ,OAAD,EAAUC,IAAV,EAAgBG,KAAhB,EAAuBC,UAAvB,CAJM,CAAT;AAMA,SAAOA,UAAU,CAACsB,QAAX,EAAP;AACD,CAjDD;;AAmDA,eAAe5B,YAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { provider } from 'web3-core'\n\nimport { BigNumber } from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\n\nimport {\n  getWethPrice,\n  getQuicPrice,\n  getWethPriceContract,\n  getQuicPriceContract,\n} from '../quic/utils'\nimport useLockedEarnings from './useLockedEarnings'\nimport useQuic from './useQuic'\nimport useBlock from './useBlock'\n\nconst useSubValues = () => {\n  const { account }: { account: string } = useWallet()\n  const quic = useQuic()\n  const wethPriceContract = getWethPriceContract(quic)\n  const quicPriceContract = getQuicPriceContract(quic)\n  const locks = useLockedEarnings()\n  const [usrSubText, setUsrSubText] = useState(new String())\n  const [quicPrices, setQuicPrices] = useState(new BigNumber(0))\n  const [wethPrices, setWethPrices] = useState(new BigNumber(0))\n\n  const getInfo = useCallback(async () => {\n    if (quic) {\n      const wethPriceFun = getWethPrice(quic).then((response) => {\n        setWethPrices(response)\n\n        const quicPriceFun = getQuicPrice(quic).then((response) => {\n          setQuicPrices(response)\n          const currentRate = wethPrices\n            .dividedBy(100000000)\n            .dividedBy(quicPrices)\n          const userValue = currentRate.multipliedBy(\n            locks.dividedBy(1000000000000000000),\n          )\n          const dailyPrice = userValue.dividedBy(1095).toFormat(2)\n          console.log(dailyPrice + ' dailyPrice')\n          console.log(wethPrices + ' wethprice')\n          console.log(quicPrices + ' quicPrice')\n          const annualPrice = userValue.dividedBy(3).toFormat(2)\n          console.log(annualPrice + ' annual')\n          const wethText = userValue.toFormat(2)\n          const usrSubText =\n            'When this unlocks it will earn you $' +\n            dailyPrice +\n            ' per day for 3 years. The equivalent of $' +\n            annualPrice +\n            ' per year!'\n          setUsrSubText(usrSubText)\n        })\n      })\n    }\n  }, [locks, usrSubText])\n\n  useEffect(() => {\n    if (account && quic) {\n      getInfo()\n    }\n  }, [account, quic, locks, usrSubText])\n\n  return usrSubText.toString()\n}\n\nexport default useSubValues\n"]},"metadata":{},"sourceType":"module"}